{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV çıktısı:', csvString); // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\n        // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\n\n        const csvOptions = {\n          hasHeader: true,\n          skipEmptyLines: true,\n          selectedDelimiter: ',',\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        console.log('BTM CSV string:', csvString); // BTM'den gelen veriyi parse et\n\n        const lines = csvString.trim().split(/\\r?\\n/);\n        const flatRecords = [];\n        const records = []; // Parameters ve Header bilgilerini sakla\n\n        const baseMetaLines = [];\n        lines.forEach(line => {\n          const [type, key, value] = line.split(',').map(v => v.trim());\n\n          if (type === 'Parameters' || type === 'Header') {\n            baseMetaLines.push(line);\n          }\n        }); // Details kayıtlarını işle\n\n        let currentGroup = [];\n        lines.forEach(line => {\n          const [type, key, value] = line.split(',').map(v => v.trim());\n\n          if (type === 'Details') {\n            // Yeni kayıt grubu başlat\n            if (key === 'RegisterId') {\n              if (currentGroup.length > 0) {\n                // Base meta bilgilerini ekle\n                records.push(...baseMetaLines.map(l => {\n                  const [t, k, v] = l.split(',').map(x => x.trim());\n                  return {\n                    Type: t,\n                    Key: k,\n                    Value: v\n                  };\n                })); // Mevcut grubu ekle\n\n                records.push(...currentGroup);\n                currentGroup = [];\n              }\n            }\n\n            currentGroup.push({\n              Type: type,\n              Key: key,\n              Value: value || ''\n            });\n          }\n        }); // Son grubu da ekle\n\n        if (currentGroup.length > 0) {\n          // Base meta bilgilerini ekle\n          records.push(...baseMetaLines.map(l => {\n            const [t, k, v] = l.split(',').map(x => x.trim());\n            return {\n              Type: t,\n              Key: k,\n              Value: v\n            };\n          })); // Son grubu ekle\n\n          records.push(...currentGroup);\n        } // Son kaydı da ekle\n\n\n        if (Object.keys(current).length > 0) {\n          records.push(Object.assign({}, current));\n        }\n\n        console.log('Tüm kayıtlar:', records); // Array olarak dön\n\n        const rows = records;\n        const properties = Array.from(new Set(records.flatMap(obj => Object.keys(obj))));\n        const pretty = records; // Aynı array'i pretty olarak da kullan\n\n        return {\n          result: rows,\n          properties,\n          prettyJson: pretty,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  } // ...existing code...\n  // BTM'den gelen Type/Key/Value formatını düz objeye çevir\n\n\n  transformBtmJson(flatData) {\n    // Tüm Key/Value çiftlerini tek bir objeye topla\n    const result = {};\n\n    for (const row of flatData || []) {\n      const {\n        Key,\n        Value\n      } = row || {}; // Her Key/Value çiftini direkt objeye ekle\n\n      if (Key && Value !== undefined) {\n        result[Key] = Value;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","csvOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","lines","trim","split","flatRecords","records","baseMetaLines","forEach","line","type","key","value","map","v","push","currentGroup","length","l","t","k","x","Type","Key","Value","Object","keys","current","assign","rows","properties","Array","from","Set","flatMap","obj","pretty","result","prettyJson","via","_btmErr","converter","getConverter","Error","localResult","convert","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","transformBtmJson","flatData","row","undefined","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n            \r\n            console.log('BTM CSV çıktısı:', csvString);\r\n\r\n            // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\r\n            // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\r\n            const csvOptions = {\r\n                hasHeader: true,\r\n                skipEmptyLines: true,\r\n                selectedDelimiter: ',',\r\n                doubleQuoteWrap: false,\r\n                selectedRowDelimiter: 'newline',\r\n                rowPrefix: '',\r\n                rowSuffix: '',\r\n                selectedEncoding: 'utf-8',\r\n                selectedQuoteOption: 'none',\r\n                trimWhitespace: true\r\n            };\r\n\r\n            console.log('BTM CSV string:', csvString);\r\n            \r\n            // BTM'den gelen veriyi parse et\r\n            const lines = csvString.trim().split(/\\r?\\n/);\r\n            const flatRecords: Array<{Type: string; Key: string; Value: string}> = [];\r\n            const records: Array<{Type: string; Key: string; Value: string}> = [];\r\n            \r\n            // Parameters ve Header bilgilerini sakla\r\n            const baseMetaLines: string[] = [];\r\n            lines.forEach(line => {\r\n                const [type, key, value] = line.split(',').map(v => v.trim());\r\n                if (type === 'Parameters' || type === 'Header') {\r\n                    baseMetaLines.push(line);\r\n                }\r\n            });\r\n            \r\n            // Details kayıtlarını işle\r\n            let currentGroup: Array<{Type: string; Key: string; Value: string}> = [];\r\n            \r\n            lines.forEach(line => {\r\n                const [type, key, value] = line.split(',').map(v => v.trim());\r\n                \r\n                if (type === 'Details') {\r\n                    // Yeni kayıt grubu başlat\r\n                    if (key === 'RegisterId') {\r\n                        if (currentGroup.length > 0) {\r\n                            // Base meta bilgilerini ekle\r\n                            records.push(...baseMetaLines.map(l => {\r\n                                const [t, k, v] = l.split(',').map(x => x.trim());\r\n                                return {Type: t, Key: k, Value: v};\r\n                            }));\r\n                            // Mevcut grubu ekle\r\n                            records.push(...currentGroup);\r\n                            currentGroup = [];\r\n                        }\r\n                    }\r\n                    currentGroup.push({Type: type, Key: key, Value: value || ''});\r\n                }\r\n            });\r\n            \r\n            // Son grubu da ekle\r\n            if (currentGroup.length > 0) {\r\n                // Base meta bilgilerini ekle\r\n                records.push(...baseMetaLines.map(l => {\r\n                    const [t, k, v] = l.split(',').map(x => x.trim());\r\n                    return {Type: t, Key: k, Value: v};\r\n                }));\r\n                // Son grubu ekle\r\n                records.push(...currentGroup);\r\n            }\r\n            \r\n            // Son kaydı da ekle\r\n            if (Object.keys(current).length > 0) {\r\n                records.push(Object.assign({}, current));\r\n            }\r\n            \r\n            console.log('Tüm kayıtlar:', records);\r\n            \r\n            // Array olarak dön\r\n            const rows = records;\r\n            const properties = Array.from(new Set(records.flatMap(obj => Object.keys(obj))));\r\n            const pretty = records; // Aynı array'i pretty olarak da kullan\r\n            return { result: rows, properties, prettyJson: pretty, via: 'btm' };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    // BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n    private transformBtmJson(flatData: Array<{ Type: string; Key: string; Value: string }>) {\r\n        // Tüm Key/Value çiftlerini tek bir objeye topla\r\n        const result: any = {};\r\n        \r\n        for (const row of flatData || []) {\r\n            const { Key, Value } = row || ({} as any);\r\n            // Her Key/Value çiftini direkt objeye ekle\r\n            if (Key && Value !== undefined) {\r\n                result[Key] = Value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}