{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/JsonConverter-Btm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (ör. 2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(5000), // Timeout'u biraz artıralım\n        catchError(err => {\n          console.error('BTM service error:', err);\n          return throwError(() => new Error('BTM servisine ulaşılamadı veya bir hata oluştu.'));\n        })));\n        console.log('BTM\\'den CSV metni alındı, CsvFileConverterService\\'e yönlendiriliyor...'); // BTM'den gelen CSV metnini bir dosyaya dönüştür\n\n        const btmCsvFile = new File([csvString], 'btm_generated.csv', {\n          type: 'text/csv'\n        }); // BTM'den gelen CSV'nin başlığı olduğunu varsayarak ayarları yap\n\n        const optionsForBtm = { ...(csvOptions || {}),\n          hasHeader: true,\n          skipEmptyLines: true\n        }; // İşi doğrudan CsvFileConverterService'e delege et\n\n        const converterResult = yield _this.csvFileConverter.convert(btmCsvFile, optionsForBtm);\n        console.log('CsvFileConverterService dönüşümü başarılı.');\n        return {\n          result: converterResult.result,\n          properties: converterResult.properties,\n          prettyJson: converterResult.result,\n          via: 'btm_via_csv_service',\n          parametersData: [],\n          headerData: [] // Bu akışta artık ayrıştırılmıyor\n\n        };\n      } catch (err) {\n        console.error('BTM akışı sırasında hata, local XML converter deneniyor:', err.message); // 2) BTM başarısızsa local XML converter'a düş\n\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) {\n          throw new Error('XML dönüştürücü bulunamadı (local).');\n        }\n\n        const localResult = yield converter.convert(file, {// UI'dan parametre gelirse burada forward edebilirsin\n        });\n        return {\n          result: localResult.result,\n          properties: localResult.properties,\n          prettyJson: localResult.result,\n          via: 'local',\n          parametersData: [],\n          headerData: []\n        };\n      }\n    })();\n  } // --------- Helpers ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","firstValueFrom","timeout","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","error","Error","log","btmCsvFile","File","type","optionsForBtm","hasHeader","skipEmptyLines","converterResult","convert","result","properties","prettyJson","via","parametersData","headerData","message","converter","getConverter","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\JsonConverter-Btm\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\r\n\r\nexport interface OrchestratedResult {\r\n  result: any[];\r\n  properties?: string[];\r\n  prettyJson?: any;\r\n  via: string;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n}\r\n\r\nexport interface BtmTransformResult {\r\n  processedData: Array<Record<string, string>>;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n  rawRows: any[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n  constructor(\r\n    private xmlBtm: XmlBtmService,\r\n    private fileConverter: FileConverterService,\r\n    private csvFileConverter: CsvFileConverterService\r\n  ) {}\r\n\r\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\r\n  async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n    const xmlText = await this.readFileAsText(file);\r\n\r\n    // 1) BTM'yi dene (ör. 2 sn timeout)\r\n    try {\r\n      const csvString: string = await firstValueFrom(\r\n        this.xmlBtm.uploadXml(xmlText).pipe(\r\n          timeout(5000), // Timeout'u biraz artıralım\r\n          catchError(err => {\r\n            console.error('BTM service error:', err);\r\n            return throwError(() => new Error('BTM servisine ulaşılamadı veya bir hata oluştu.'));\r\n          })\r\n        )\r\n      );\r\n\r\n      console.log('BTM\\'den CSV metni alındı, CsvFileConverterService\\'e yönlendiriliyor...');\r\n\r\n      // BTM'den gelen CSV metnini bir dosyaya dönüştür\r\n      const btmCsvFile = new File([csvString], 'btm_generated.csv', { type: 'text/csv' });\r\n\r\n      // BTM'den gelen CSV'nin başlığı olduğunu varsayarak ayarları yap\r\n      const optionsForBtm: CsvOptions = {\r\n        ...(csvOptions || {}), // Kullanıcının UI'da seçtiği ayarları koru\r\n        hasHeader: true, // BTM çıktısının başlığı var\r\n        skipEmptyLines: true,\r\n      };\r\n\r\n      // İşi doğrudan CsvFileConverterService'e delege et\r\n      const converterResult = await this.csvFileConverter.convert(btmCsvFile, optionsForBtm);\r\n\r\n      console.log('CsvFileConverterService dönüşümü başarılı.');\r\n\r\n      return {\r\n        result: converterResult.result,\r\n        properties: converterResult.properties,\r\n        prettyJson: converterResult.result,\r\n        via: 'btm_via_csv_service', // Akışın nereden geldiğini belirtelim\r\n        parametersData: [], // Bu akışta artık ayrıştırılmıyor\r\n        headerData: []      // Bu akışta artık ayrıştırılmıyor\r\n      };\r\n\r\n    } catch (err: any) {\r\n      console.error('BTM akışı sırasında hata, local XML converter deneniyor:', err.message);\r\n      \r\n      // 2) BTM başarısızsa local XML converter'a düş\r\n      const converter = this.fileConverter.getConverter('xml');\r\n      if (!converter) {\r\n        throw new Error('XML dönüştürücü bulunamadı (local).');\r\n      }\r\n\r\n      const localResult = await converter.convert(file, {\r\n        // UI'dan parametre gelirse burada forward edebilirsin\r\n      });\r\n\r\n      return {\r\n        result: localResult.result,\r\n        properties: localResult.properties,\r\n        prettyJson: localResult.result,\r\n        via: 'local',\r\n        parametersData: [],\r\n        headerData: []\r\n      };\r\n    }\r\n  }\r\n\r\n  // --------- Helpers ---------\r\n\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}