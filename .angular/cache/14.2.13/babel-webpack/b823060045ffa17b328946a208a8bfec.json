{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (ör. 2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV:', csvString.slice(0, 200) + '...'); // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\n\n        const btmResult = _this.transformBtmCsv(csvString); // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\n\n\n        if (btmResult.processedData.length > 0) {\n          console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt'); // Flat tablo için gerekli property listesi\n\n          const properties = ['DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails', 'TransferAmount', 'TotalAmount', 'RegisterId']; // Parametre ve Header kayıtlarını da ekle\n\n          btmResult.parametersData.forEach(p => {\n            if (!properties.includes(p.key)) {\n              properties.push(p.key);\n            }\n          });\n          btmResult.headerData.forEach(h => {\n            if (!properties.includes(h.key)) {\n              properties.push(h.key);\n            }\n          }); // Flat tablo sonucu oluştur\n\n          const resultRows = btmResult.processedData.map(row => {\n            const fullRow = {}; // Processed data alanlarını ekle\n\n            for (const [key, value] of Object.entries(row)) {\n              fullRow[key] = value || '-';\n            } // Parameters alanlarını ekle\n\n\n            for (const param of btmResult.parametersData) {\n              if (!(param.key in fullRow)) {\n                fullRow[param.key] = param.value || '-';\n              }\n            } // Header alanlarını ekle\n\n\n            for (const header of btmResult.headerData) {\n              if (!(header.key in fullRow)) {\n                fullRow[header.key] = header.value || '-';\n              }\n            }\n\n            return fullRow;\n          });\n          return {\n            result: resultRows,\n            properties,\n            prettyJson: btmResult,\n            via: 'btm',\n            // Parametre ve Header bilgilerini de ekle\n            parametersData: btmResult.parametersData,\n            headerData: btmResult.headerData\n          };\n        } // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\n\n\n        console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor'); // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\n\n        const delimiter = _this.detectDelimiter(csvString);\n\n        const defaultOptions = {\n          hasHeader: false,\n          skipEmptyLines: true,\n          selectedDelimiter: delimiter,\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        const options = { ...(csvOptions ?? defaultOptions),\n          selectedDelimiter: delimiter\n        };\n        const csvFile = new File([csvString], 'btm.csv', {\n          type: 'text/csv'\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, options);\n        return { ...converterResult,\n          prettyJson: converterResult.result,\n          via: 'btm',\n          parametersData: [],\n          headerData: [] // Standart dönüşümde boş\n\n        };\n      } catch (_btmErr) {\n        // 2) BTM başarısızsa local XML converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) {\n          throw new Error('XML dönüştürücü bulunamadı (local).');\n        }\n\n        const localResult = yield converter.convert(file, {// UI'dan parametre gelirse burada forward edebilirsin\n        });\n        return { ...localResult,\n          prettyJson: localResult.result,\n          via: 'local',\n          parametersData: [],\n          headerData: [] // Local converter'da boş\n\n        };\n      }\n    })();\n  } // --------- Helpers ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const d of delimiters) {\n      counts[d] = 0;\n\n      for (const line of lines) {\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') inQuotes = !inQuotes;else if (line[i] === d && !inQuotes) counts[d]++;\n        }\n      }\n    }\n\n    let best = ',',\n        max = 0;\n\n    for (const [d, c] of Object.entries(counts)) {\n      if (c > max) {\n        max = c;\n        best = d;\n      }\n    }\n\n    return best;\n  }\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\n\n\n  transformBtmCsv(csv) {\n    const rows = this.parseTypeKeyValueCsv(csv);\n    console.log('Parsed rows:', rows.length);\n\n    if (rows.length === 0) {\n      return {\n        processedData: [],\n        parametersData: [],\n        headerData: [],\n        rawRows: []\n      };\n    } // Örnek satırları logla\n\n\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\n    console.log('Sample rows:', JSON.stringify(sampleRows)); // Parameters ve Header kayıtlarını topla\n\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\n    const headerData = this.extractKeyValue(rows, 'Header');\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length); // JavaScript objelerine dönüştür\n\n    const paramObj = this.toObject(parametersData);\n    const headerObj = this.toObject(headerData); // IbanHesap ve Details gruplarını ayır\n\n    let ibanGroups = this.groupByTypeAsObjects(rows, 'IbanHesap');\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length); // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\n\n    const tempIbanGroups = [];\n\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\n      for (const detGroup of detailGroups) {\n        if (detGroup['FinalAccountNo'] || detGroup['DestinationIban']) {\n          tempIbanGroups.push({\n            FinalAccountNo: detGroup['FinalAccountNo'] || '',\n            DestinationIban: detGroup['DestinationIban'] || '',\n            HesapNo: detGroup['FinalAccountNo'] || '',\n            Iban: detGroup['DestinationIban'] || ''\n          });\n        }\n      }\n\n      if (tempIbanGroups.length > 0) {\n        ibanGroups = tempIbanGroups;\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\n      }\n    } // Hala IbanHesap grup yoksa ve boş data istemiyorsak\n\n\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\n      // Boş IbanHesap grupları oluştur (detailGroups sayısı kadar)\n      ibanGroups = detailGroups.map(() => ({\n        FinalAccountNo: '',\n        DestinationIban: '',\n        HesapNo: '',\n        Iban: ''\n      }));\n      console.log('Varsayılan IbanHesap grupları oluşturuldu:', ibanGroups.length);\n    } // Eğer detailGroups yoksa ama IbanHesap varsa\n\n\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\n      // Boş Details grupları oluştur\n      detailGroups = ibanGroups.map(() => ({\n        TotalCount: '',\n        OrderDetails: '',\n        TransferAmount: '',\n        TotalAmount: '',\n        RegisterId: ''\n      }));\n      console.log('Varsayılan Detail grupları oluşturuldu:', detailGroups.length);\n    } // UI tablosu için processedData (component ile aynı alanlar)\n\n\n    const processedData = ibanGroups.map((ibanObj, i) => {\n      const det = detailGroups[i] || {};\n      return {\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || '',\n        FinalAccountNo: ibanObj['FinalAccountNo'] || ibanObj['HesapNo'] || '',\n        TotalCount: det['TotalCount'] || '',\n        OrderDetails: det['OrderDetails'] || det['Detail'] || '',\n        TransferAmount: det['TransferAmount'] || det['Miktar'] || '',\n        TotalAmount: det['TotalAmount'] || '',\n        RegisterId: det['RegisterId'] || det['Sicil'] || ''\n      };\n    });\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\n\n    if (processedData.length > 0) {\n      console.log('İlk işlenmiş veri örneği:', processedData[0]);\n    }\n\n    return {\n      processedData,\n      parametersData,\n      headerData,\n      rawRows: rows\n    };\n  } // BtmFrontTransformerService ile benzer yardımcı metotlar\n\n\n  parseTypeKeyValueCsv(csv) {\n    const lines = csv.trim().split(/\\r?\\n/);\n    console.log('CSV satır sayısı:', lines.length);\n\n    if (lines.length > 0) {\n      console.log('İlk satır örnek:', lines[0]);\n    } // Satırların formatını kontrol et\n\n\n    const delimiter = this.detectDelimiter(csv);\n    console.log('Tespit edilen ayırıcı:', delimiter); // Tüm satırları işle (header/başlık satırı dâhil)\n\n    const rows = lines.map(line => {\n      // Ayırıcıya göre böl\n      const parts = line.split(delimiter);\n      const type = (parts[0] || '').trim();\n      const key = (parts[1] || '').trim();\n      const value = (parts[2] || '').trim();\n      return {\n        type,\n        key,\n        value\n      };\n    }).filter(row => row.type && row.key); // Boş tip ve key olanları filtrele\n    // Type değerlerini logla\n\n    const types = new Set(rows.map(r => r.type));\n    console.log('Tespit edilen tip değerleri:', Array.from(types)); // Parameters ve Header kayıtlarını say\n\n    const paramCount = rows.filter(r => r.type === 'Parameters').length;\n    const headerCount = rows.filter(r => r.type === 'Header').length;\n    const detailsCount = rows.filter(r => r.type === 'Details').length;\n    console.log(`Kayıt dağılımı - Parameters: ${paramCount}, Header: ${headerCount}, Details: ${detailsCount}`);\n    return rows;\n  }\n\n  extractKeyValue(rows, wantedType) {\n    return rows.filter(r => r.type === wantedType).map(r => ({\n      key: r.key,\n      value: r.value\n    }));\n  }\n\n  toObject(pairs) {\n    const obj = {};\n\n    for (const {\n      key,\n      value\n    } of pairs) {\n      if (key) {\n        obj[key] = value;\n      }\n    }\n\n    return obj;\n  }\n\n  groupByTypeAsObjects(rows, wantedType) {\n    const items = rows.filter(r => r.type === wantedType);\n\n    if (items.length === 0) {\n      return [];\n    }\n\n    const keys = Array.from(new Set(items.map(i => i.key))); // RegisterId'ye göre gruplandırma yap\n\n    if (keys.includes('RegisterId')) {\n      const groups = {};\n\n      for (const item of items) {\n        if (item.key === 'RegisterId') {\n          // Yeni grup başlat\n          if (!groups[item.value]) {\n            groups[item.value] = {\n              RegisterId: item.value\n            };\n          }\n        } else if (Object.keys(groups).length > 0) {\n          // Son gruba ekle (RegisterId yoksa)\n          const lastRegId = Object.keys(groups)[Object.keys(groups).length - 1];\n          groups[lastRegId][item.key] = item.value;\n        }\n      }\n\n      return Object.values(groups);\n    } // RegisterId yoksa, BtmFrontTransformerService'deki gibi grupla\n\n\n    return items.reduce((groups, curr, idx) => {\n      const groupIdx = Math.floor(idx / Math.max(keys.length, 1));\n      groups[groupIdx] = groups[groupIdx] || {};\n      groups[groupIdx][curr.key] = curr.value;\n      return groups;\n    }, []);\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","slice","btmResult","transformBtmCsv","processedData","length","properties","parametersData","forEach","p","includes","key","push","headerData","h","resultRows","map","row","fullRow","value","Object","entries","param","header","result","prettyJson","via","delimiter","detectDelimiter","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","options","csvFile","File","type","converterResult","convert","_btmErr","converter","getConverter","Error","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","lines","trim","split","delimiters","counts","d","line","inQuotes","i","best","max","c","csv","rows","parseTypeKeyValueCsv","rawRows","sampleRows","Math","min","JSON","stringify","extractKeyValue","paramObj","toObject","headerObj","ibanGroups","groupByTypeAsObjects","detailGroups","tempIbanGroups","detGroup","FinalAccountNo","DestinationIban","HesapNo","Iban","TotalCount","OrderDetails","TransferAmount","TotalAmount","RegisterId","ibanObj","det","parts","filter","types","Set","r","Array","from","paramCount","headerCount","detailsCount","wantedType","pairs","obj","items","keys","groups","item","lastRegId","values","reduce","curr","idx","groupIdx","floor","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n  result: any[];         // flat tablo datası\r\n  properties: string[];  // tablo başlıkları\r\n  prettyJson?: any;      // CSV converter ne üretiyorsa aynı\r\n  via: 'btm' | 'local';  // hangi yol kullanıldı\r\n  // Ek özellikler\r\n  parametersData?: Array<{ key: string; value: string }>; // Parameters verileri\r\n  headerData?: Array<{ key: string; value: string }>;     // Header verileri\r\n}\r\n\r\n// BtmFront formatı için dönüşüm sonucu\r\ninterface BtmTransformResult {\r\n  processedData: Array<{\r\n    DestinationIban: string;\r\n    FinalAccountNo: string;\r\n    TotalCount: string;\r\n    OrderDetails: string;\r\n    TransferAmount: string;\r\n    TotalAmount: string;\r\n    RegisterId: string;\r\n  }>;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n  rawRows: Array<{ type: string; key: string; value: string }>;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n  constructor(\r\n    private xmlBtm: XmlBtmService,\r\n    private fileConverter: FileConverterService,\r\n    private csvFileConverter: CsvFileConverterService\r\n  ) {}\r\n\r\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\r\n  async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n    const xmlText = await this.readFileAsText(file);\r\n\r\n    // 1) BTM'yi dene (ör. 2 sn timeout)\r\n    try {\r\n      const csvString: string = await firstValueFrom(\r\n        this.xmlBtm.uploadXml(xmlText).pipe(\r\n          timeout(2000),\r\n          catchError(err => throwError(() => err))\r\n        )\r\n      );\r\n\r\n      console.log('BTM CSV:', csvString.slice(0, 200) + '...');\r\n      \r\n      // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\r\n      const btmResult = this.transformBtmCsv(csvString);\r\n      \r\n      // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\r\n      if (btmResult.processedData.length > 0) {\r\n        console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt');\r\n        \r\n        // Flat tablo için gerekli property listesi\r\n        const properties = [\r\n          'DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails', \r\n          'TransferAmount', 'TotalAmount', 'RegisterId'\r\n        ];\r\n        \r\n        // Parametre ve Header kayıtlarını da ekle\r\n        btmResult.parametersData.forEach((p: { key: string; value: string }) => {\r\n          if (!properties.includes(p.key)) {\r\n            properties.push(p.key);\r\n          }\r\n        });\r\n        \r\n        btmResult.headerData.forEach((h: { key: string; value: string }) => {\r\n          if (!properties.includes(h.key)) {\r\n            properties.push(h.key);\r\n          }\r\n        });\r\n        \r\n        // Flat tablo sonucu oluştur\r\n        const resultRows = btmResult.processedData.map((row: Record<string, string>) => {\r\n          const fullRow: Record<string, string> = {};\r\n          \r\n          // Processed data alanlarını ekle\r\n          for (const [key, value] of Object.entries(row)) {\r\n            fullRow[key] = value || '-';\r\n          }\r\n          \r\n          // Parameters alanlarını ekle\r\n          for (const param of btmResult.parametersData) {\r\n            if (!(param.key in fullRow)) {\r\n              fullRow[param.key] = param.value || '-';\r\n            }\r\n          }\r\n          \r\n          // Header alanlarını ekle\r\n          for (const header of btmResult.headerData) {\r\n            if (!(header.key in fullRow)) {\r\n              fullRow[header.key] = header.value || '-';\r\n            }\r\n          }\r\n          \r\n          return fullRow;\r\n        });\r\n        \r\n        return {\r\n          result: resultRows,\r\n          properties,\r\n          prettyJson: btmResult, // BTM sonucunun tamamını prettyJson olarak kaydet\r\n          via: 'btm',\r\n          // Parametre ve Header bilgilerini de ekle\r\n          parametersData: btmResult.parametersData,\r\n          headerData: btmResult.headerData\r\n        };\r\n      }\r\n      \r\n      // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\r\n      console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor');\r\n      \r\n      // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\r\n      const delimiter = this.detectDelimiter(csvString);\r\n      const defaultOptions: CsvOptions = {\r\n        hasHeader: false,                 // BTM çıktısı çoğu zaman header'sız geliyor\r\n        skipEmptyLines: true,\r\n        selectedDelimiter: delimiter,\r\n        doubleQuoteWrap: false,\r\n        selectedRowDelimiter: 'newline',\r\n        rowPrefix: '',\r\n        rowSuffix: '',\r\n        selectedEncoding: 'utf-8',\r\n        selectedQuoteOption: 'none',\r\n        trimWhitespace: true,\r\n      };\r\n      const options: CsvOptions = { ...(csvOptions ?? defaultOptions), selectedDelimiter: delimiter };\r\n\r\n      const csvFile = new File([csvString], 'btm.csv', { type: 'text/csv' });\r\n      const converterResult = await this.csvFileConverter.convert(csvFile, options);\r\n\r\n      return {\r\n        ...converterResult,\r\n        prettyJson: converterResult.result,\r\n        via: 'btm',\r\n        parametersData: [], // Standart dönüşümde boş\r\n        headerData: []      // Standart dönüşümde boş\r\n      };\r\n    } catch (_btmErr) {\r\n      // 2) BTM başarısızsa local XML converter'a düş\r\n      const converter = this.fileConverter.getConverter('xml');\r\n      if (!converter) {\r\n        throw new Error('XML dönüştürücü bulunamadı (local).');\r\n      }\r\n\r\n      const localResult = await converter.convert(file, {\r\n        // UI'dan parametre gelirse burada forward edebilirsin\r\n      });\r\n\r\n      return {\r\n        ...localResult,\r\n        prettyJson: localResult.result,\r\n        via: 'local',\r\n        parametersData: [], // Local converter'da boş\r\n        headerData: []      // Local converter'da boş\r\n      };\r\n    }\r\n  }\r\n\r\n  // --------- Helpers ---------\r\n\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\r\n  private detectDelimiter(csvString: string): string {\r\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\r\n    const delimiters = [',', ';', '\\t', '|'];\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const d of delimiters) {\r\n      counts[d] = 0;\r\n      for (const line of lines) {\r\n        let inQuotes = false;\r\n        for (let i = 0; i < line.length; i++) {\r\n          if (line[i] === '\"') inQuotes = !inQuotes;\r\n          else if (line[i] === d && !inQuotes) counts[d]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let best = ',', max = 0;\r\n    for (const [d, c] of Object.entries(counts)) {\r\n      if (c > max) { max = c; best = d; }\r\n    }\r\n    return best;\r\n  }\r\n  \r\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\r\n  private transformBtmCsv(csv: string): BtmTransformResult {\r\n    const rows = this.parseTypeKeyValueCsv(csv);\r\n    \r\n    console.log('Parsed rows:', rows.length);\r\n    if (rows.length === 0) {\r\n      return {\r\n        processedData: [],\r\n        parametersData: [],\r\n        headerData: [],\r\n        rawRows: []\r\n      };\r\n    }\r\n    \r\n    // Örnek satırları logla\r\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\r\n    console.log('Sample rows:', JSON.stringify(sampleRows));\r\n    \r\n    // Parameters ve Header kayıtlarını topla\r\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\r\n    const headerData = this.extractKeyValue(rows, 'Header');\r\n    \r\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length);\r\n    \r\n    // JavaScript objelerine dönüştür\r\n    const paramObj = this.toObject(parametersData);\r\n    const headerObj = this.toObject(headerData);\r\n    \r\n    // IbanHesap ve Details gruplarını ayır\r\n    let ibanGroups = this.groupByTypeAsObjects(rows, 'IbanHesap');\r\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\r\n    \r\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length);\r\n    \r\n    // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\r\n    const tempIbanGroups: Array<Record<string, string>> = [];\r\n    \r\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\r\n      for (const detGroup of detailGroups) {\r\n        if (detGroup['FinalAccountNo'] || detGroup['DestinationIban']) {\r\n          tempIbanGroups.push({\r\n            FinalAccountNo: detGroup['FinalAccountNo'] || '',\r\n            DestinationIban: detGroup['DestinationIban'] || '',\r\n            HesapNo: detGroup['FinalAccountNo'] || '',\r\n            Iban: detGroup['DestinationIban'] || ''\r\n          });\r\n        }\r\n      }\r\n      \r\n      if (tempIbanGroups.length > 0) {\r\n        ibanGroups = tempIbanGroups;\r\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\r\n      }\r\n    }\r\n    \r\n    // Hala IbanHesap grup yoksa ve boş data istemiyorsak\r\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\r\n      // Boş IbanHesap grupları oluştur (detailGroups sayısı kadar)\r\n      ibanGroups = detailGroups.map(() => ({\r\n        FinalAccountNo: '',\r\n        DestinationIban: '',\r\n        HesapNo: '',\r\n        Iban: ''\r\n      }));\r\n      \r\n      console.log('Varsayılan IbanHesap grupları oluşturuldu:', ibanGroups.length);\r\n    }\r\n    \r\n    // Eğer detailGroups yoksa ama IbanHesap varsa\r\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\r\n      // Boş Details grupları oluştur\r\n      detailGroups = ibanGroups.map(() => ({\r\n        TotalCount: '',\r\n        OrderDetails: '',\r\n        TransferAmount: '',\r\n        TotalAmount: '',\r\n        RegisterId: ''\r\n      }));\r\n      \r\n      console.log('Varsayılan Detail grupları oluşturuldu:', detailGroups.length);\r\n    }\r\n    \r\n    // UI tablosu için processedData (component ile aynı alanlar)\r\n    const processedData = ibanGroups.map((ibanObj, i) => {\r\n      const det = detailGroups[i] || {};\r\n      return {\r\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || '',\r\n        FinalAccountNo: ibanObj['FinalAccountNo'] || ibanObj['HesapNo'] || '',\r\n        TotalCount: det['TotalCount'] || '',\r\n        OrderDetails: det['OrderDetails'] || det['Detail'] || '',\r\n        TransferAmount: det['TransferAmount'] || det['Miktar'] || '',\r\n        TotalAmount: det['TotalAmount'] || '',\r\n        RegisterId: det['RegisterId'] || det['Sicil'] || ''\r\n      };\r\n    });\r\n    \r\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\r\n    if (processedData.length > 0) {\r\n      console.log('İlk işlenmiş veri örneği:', processedData[0]);\r\n    }\r\n    \r\n    return {\r\n      processedData,\r\n      parametersData,\r\n      headerData,\r\n      rawRows: rows\r\n    };\r\n  }\r\n  \r\n  // BtmFrontTransformerService ile benzer yardımcı metotlar\r\n  \r\n  private parseTypeKeyValueCsv(csv: string): Array<{ type: string; key: string; value: string }> {\r\n    const lines = csv.trim().split(/\\r?\\n/);\r\n    \r\n    console.log('CSV satır sayısı:', lines.length);\r\n    if (lines.length > 0) {\r\n      console.log('İlk satır örnek:', lines[0]);\r\n    }\r\n    \r\n    // Satırların formatını kontrol et\r\n    const delimiter = this.detectDelimiter(csv);\r\n    console.log('Tespit edilen ayırıcı:', delimiter);\r\n    \r\n    // Tüm satırları işle (header/başlık satırı dâhil)\r\n    const rows = lines.map(line => {\r\n      // Ayırıcıya göre böl\r\n      const parts = line.split(delimiter);\r\n      const type = (parts[0] || '').trim();\r\n      const key = (parts[1] || '').trim();\r\n      const value = (parts[2] || '').trim();\r\n      return { type, key, value };\r\n    }).filter(row => row.type && row.key); // Boş tip ve key olanları filtrele\r\n    \r\n    // Type değerlerini logla\r\n    const types = new Set(rows.map(r => r.type));\r\n    console.log('Tespit edilen tip değerleri:', Array.from(types));\r\n    \r\n    // Parameters ve Header kayıtlarını say\r\n    const paramCount = rows.filter(r => r.type === 'Parameters').length;\r\n    const headerCount = rows.filter(r => r.type === 'Header').length;\r\n    const detailsCount = rows.filter(r => r.type === 'Details').length;\r\n    console.log(`Kayıt dağılımı - Parameters: ${paramCount}, Header: ${headerCount}, Details: ${detailsCount}`);\r\n    \r\n    return rows;\r\n  }\r\n  \r\n  private extractKeyValue(\r\n    rows: Array<{ type: string; key: string; value: string }>,\r\n    wantedType: string\r\n  ): Array<{ key: string; value: string }> {\r\n    return rows\r\n      .filter(r => r.type === wantedType)\r\n      .map(r => ({ key: r.key, value: r.value }));\r\n  }\r\n  \r\n  private toObject(pairs: Array<{ key: string; value: string }>): Record<string, string> {\r\n    const obj: Record<string, string> = {};\r\n    for (const { key, value } of pairs) {\r\n      if (key) {\r\n        obj[key] = value;\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  private groupByTypeAsObjects(\r\n    rows: Array<{ type: string; key: string; value: string }>,\r\n    wantedType: string\r\n  ): Array<Record<string, string>> {\r\n    const items = rows.filter(r => r.type === wantedType);\r\n    \r\n    if (items.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    const keys = Array.from(new Set(items.map(i => i.key)));\r\n    \r\n    // RegisterId'ye göre gruplandırma yap\r\n    if (keys.includes('RegisterId')) {\r\n      const groups: Record<string, Record<string, string>> = {};\r\n      \r\n      for (const item of items) {\r\n        if (item.key === 'RegisterId') {\r\n          // Yeni grup başlat\r\n          if (!groups[item.value]) {\r\n            groups[item.value] = { RegisterId: item.value };\r\n          }\r\n        } else if (Object.keys(groups).length > 0) {\r\n          // Son gruba ekle (RegisterId yoksa)\r\n          const lastRegId = Object.keys(groups)[Object.keys(groups).length - 1];\r\n          groups[lastRegId][item.key] = item.value;\r\n        }\r\n      }\r\n      \r\n      return Object.values(groups);\r\n    }\r\n    \r\n    // RegisterId yoksa, BtmFrontTransformerService'deki gibi grupla\r\n    return items.reduce((groups: Array<Record<string, string>>, curr, idx) => {\r\n      const groupIdx = Math.floor(idx / Math.max(keys.length, 1));\r\n      groups[groupIdx] = groups[groupIdx] || {};\r\n      groups[groupIdx][curr.key] = curr.value;\r\n      return groups;\r\n    }, []);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}