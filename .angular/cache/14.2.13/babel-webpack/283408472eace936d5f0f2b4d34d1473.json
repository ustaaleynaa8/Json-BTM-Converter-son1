{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err)))); // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\n        // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\n        // CSV string'i direkt parse edip dönüştürüyoruz\n\n        const lines = csvString.trim().split(/\\r?\\n/);\n        const rows = lines.map(line => {\n          const [Type, Key, Value] = line.split(',').map(v => v.trim());\n          return {\n            Type,\n            Key,\n            Value\n          };\n        }); // 3) flat'ten okunaklı/gruplu JSON üret\n\n        const pretty = _this.transformBtmJson(rows);\n\n        return {\n          result: rows,\n          properties: headers,\n          prettyJson: pretty,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  } // ...existing code...\n  // flat (Type/Key/Value) -> { Parameters, Header, OrderDetails: { IbanHesap[], Details[] } }\n\n\n  transformBtmJson(flatData) {\n    const out = {\n      Parameters: {},\n      Header: {},\n      OrderDetails: {\n        IbanHesap: [],\n        Details: []\n      }\n    };\n    let currentIban = null;\n    let currentDetail = null;\n\n    for (const row of flatData || []) {\n      const {\n        Type,\n        Key,\n        Value\n      } = row || {};\n\n      if (Type === 'Parameters') {\n        out.Parameters[Key] = Value;\n        continue;\n      }\n\n      if (Type === 'Header') {\n        out.Header[Key] = Value;\n        continue;\n      }\n\n      if (Type === 'IbanHesap') {\n        if (!currentIban || Key === 'DestinationIban') {\n          currentIban = {};\n          out.OrderDetails.IbanHesap.push(currentIban);\n        }\n\n        currentIban[Key] = Value;\n        continue;\n      }\n\n      if (Type === 'Details') {\n        if (!currentDetail || Key === 'TotalCount' || Key === 'OrderDetails') {\n          currentDetail = {};\n          out.OrderDetails.Details.push(currentDetail);\n        }\n\n        currentDetail[Key] = Value;\n        continue;\n      }\n    }\n\n    return out;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","xmlText","readFileAsText","csvString","uploadXml","pipe","err","lines","trim","split","rows","map","line","Type","Key","Value","v","pretty","transformBtmJson","result","properties","headers","prettyJson","via","_btmErr","converter","getConverter","Error","localResult","convert","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","flatData","out","Parameters","Header","OrderDetails","IbanHesap","Details","currentIban","currentDetail","row","push","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n\r\n            // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\r\n            // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\r\n            // CSV string'i direkt parse edip dönüştürüyoruz\r\n            const lines = csvString.trim().split(/\\r?\\n/);\r\n            const rows = lines.map(line => {\r\n                const [Type, Key, Value] = line.split(',').map(v => v.trim());\r\n                return { Type, Key, Value };\r\n            });\r\n\r\n            // 3) flat'ten okunaklı/gruplu JSON üret\r\n            const pretty = this.transformBtmJson(rows);\r\n\r\n            return { result: rows, properties: headers, prettyJson: pretty, via: 'btm' };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    // flat (Type/Key/Value) -> { Parameters, Header, OrderDetails: { IbanHesap[], Details[] } }\r\n    private transformBtmJson(flatData: Array<{ Type: string; Key: string; Value: string }>) {\r\n        const out: any = {\r\n            Parameters: {},\r\n            Header: {},\r\n            OrderDetails: { IbanHesap: [], Details: [] }\r\n        };\r\n\r\n        let currentIban: any | null = null;\r\n        let currentDetail: any | null = null;\r\n\r\n        for (const row of flatData || []) {\r\n            const { Type, Key, Value } = row || ({} as any);\r\n\r\n            if (Type === 'Parameters') { out.Parameters[Key] = Value; continue; }\r\n            if (Type === 'Header') { out.Header[Key] = Value; continue; }\r\n\r\n            if (Type === 'IbanHesap') {\r\n                if (!currentIban || Key === 'DestinationIban') {\r\n                    currentIban = {};\r\n                    out.OrderDetails.IbanHesap.push(currentIban);\r\n                }\r\n                currentIban[Key] = Value;\r\n                continue;\r\n            }\r\n\r\n            if (Type === 'Details') {\r\n                if (!currentDetail || Key === 'TotalCount' || Key === 'OrderDetails') {\r\n                    currentDetail = {};\r\n                    out.OrderDetails.Details.push(currentDetail);\r\n                }\r\n                currentDetail[Key] = Value;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        return out;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}