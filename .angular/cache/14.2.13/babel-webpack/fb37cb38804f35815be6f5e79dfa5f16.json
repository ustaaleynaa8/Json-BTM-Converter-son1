{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/JsonConverter-Btm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (ör. 2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV:', csvString.slice(0, 200) + '...'); // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\n\n        const btmResult = _this.transformBtmCsv(csvString); // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\n\n\n        if (btmResult.processedData.length > 0) {\n          console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt'); // Flat tablo için gerekli property listesi\n\n          const properties = ['DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails', 'TransferAmount', 'TotalAmount', 'RegisterId']; // Parametre ve Header kayıtlarını da ekle\n\n          btmResult.parametersData.forEach(p => {\n            if (!properties.includes(p.key)) {\n              properties.push(p.key);\n            }\n          });\n          btmResult.headerData.forEach(h => {\n            if (!properties.includes(h.key)) {\n              properties.push(h.key);\n            }\n          }); // Flat tablo sonucu oluştur\n\n          const resultRows = btmResult.processedData.map(row => {\n            const fullRow = {}; // Processed data alanlarını ekle\n\n            for (const [key, value] of Object.entries(row)) {\n              fullRow[key] = value || '-';\n            } // Parameters alanlarını ekle\n\n\n            for (const param of btmResult.parametersData) {\n              if (!(param.key in fullRow)) {\n                fullRow[param.key] = param.value || '-';\n              }\n            } // Header alanlarını ekle\n\n\n            for (const header of btmResult.headerData) {\n              if (!(header.key in fullRow)) {\n                fullRow[header.key] = header.value || '-';\n              }\n            }\n\n            return fullRow;\n          });\n          return {\n            result: resultRows,\n            properties,\n            prettyJson: btmResult,\n            via: 'btm',\n            parametersData: btmResult.parametersData,\n            headerData: btmResult.headerData\n          };\n        } // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\n\n\n        console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor'); // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\n\n        const delimiter = _this.detectDelimiter(csvString);\n\n        const defaultOptions = {\n          hasHeader: false,\n          skipEmptyLines: true,\n          selectedDelimiter: delimiter,\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        const options = { ...(csvOptions ?? defaultOptions),\n          selectedDelimiter: delimiter\n        };\n        const csvFile = new File([csvString], 'btm.csv', {\n          type: 'text/csv'\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, options);\n        return {\n          result: converterResult.result,\n          properties: converterResult.properties,\n          prettyJson: converterResult.result,\n          via: 'btm',\n          parametersData: [],\n          headerData: [] // Standart dönüşümde boş\n\n        };\n      } catch (_btmErr) {\n        // 2) BTM başarısızsa local XML converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) {\n          throw new Error('XML dönüştürücü bulunamadı (local).');\n        }\n\n        const localResult = yield converter.convert(file, {// UI'dan parametre gelirse burada forward edebilirsin\n        });\n        return {\n          result: localResult.result,\n          properties: localResult.properties,\n          prettyJson: localResult.result,\n          via: 'local',\n          parametersData: [],\n          headerData: []\n        };\n      }\n    })();\n  } // --------- Helpers ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const d of delimiters) {\n      counts[d] = 0;\n\n      for (const line of lines) {\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') inQuotes = !inQuotes;else if (line[i] === d && !inQuotes) counts[d]++;\n        }\n      }\n    }\n\n    let best = ',',\n        max = 0;\n\n    for (const [d, c] of Object.entries(counts)) {\n      if (c > max) {\n        max = c;\n        best = d;\n      }\n    }\n\n    return best;\n  }\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\n\n\n  transformBtmCsv(csv) {\n    const rows = this.parseTypeKeyValueCsv(csv);\n\n    if (rows.length === 0) {\n      return {\n        processedData: [],\n        parametersData: [],\n        headerData: [],\n        rawRows: []\n      };\n    }\n\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\n    const headerData = this.extractKeyValue(rows, 'Header');\n    const processedData = [];\n    let currentRecord = {};\n\n    for (const row of rows) {\n      if (row.type === 'IbanHesap' && row.key === 'DestinationIban') {\n        if (Object.keys(currentRecord).length > 0) {\n          processedData.push(currentRecord);\n        }\n\n        currentRecord = {};\n      }\n\n      if (row.type === 'IbanHesap' || row.type === 'Details') {\n        currentRecord[row.key] = row.value;\n      }\n    }\n\n    if (Object.keys(currentRecord).length > 0) {\n      processedData.push(currentRecord);\n    }\n\n    const finalProcessedData = processedData.map(record => ({\n      DestinationIban: record['DestinationIban'] || record['Iban'] || '',\n      FinalAccountNo: record['FinalAccountNo'] || record['HesapNo'] || '',\n      TotalCount: record['TotalCount'] || '',\n      OrderDetails: record['OrderDetails'] || record['Detail'] || '',\n      TransferAmount: record['TransferAmount'] || record['Miktar'] || '',\n      TotalAmount: record['TotalAmount'] || record['ToplamTutar'] || record['Toplam'] || '',\n      RegisterId: record['RegisterId'] || record['Sicil'] || record['SicilNo'] || record['RegistrationId'] || ''\n    }));\n    console.log('Sıralı işleme sonrası oluşturulan data:', finalProcessedData.length, finalProcessedData);\n    return {\n      processedData: finalProcessedData,\n      parametersData,\n      headerData,\n      rawRows: rows\n    };\n  } // Eksik metod implementasyonları\n\n\n  parseTypeKeyValueCsv(csv) {\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\n    const lines = csv.trim().split(/\\r?\\n/);\n    const rows = [];\n\n    for (const line of lines) {\n      if (line.trim()) {\n        // Basit CSV parsing - gerçek implementasyonunuza göre ayarlayın\n        const parts = line.split(',').map(part => part.trim().replace(/\"/g, ''));\n\n        if (parts.length >= 3) {\n          rows.push({\n            type: parts[0],\n            key: parts[1],\n            value: parts.slice(2).join(',') // Eğer value'da virgül varsa birleştir\n\n          });\n        }\n      }\n    }\n\n    return rows;\n  }\n\n  extractKeyValue(rows, type) {\n    return rows.filter(row => row.type === type).map(row => ({\n      key: row.key || '',\n      value: row.value || ''\n    }));\n  }\n\n  toObject(keyValuePairs) {\n    const result = {};\n\n    for (const pair of keyValuePairs) {\n      result[pair.key] = pair.value;\n    }\n\n    return result;\n  }\n\n  groupByTypeAsObjects(rows, type) {\n    const filteredRows = rows.filter(row => row.type === type);\n    const groups = []; // Basit gruplama - gerçek implementasyonunuza göre ayarlayın\n\n    let currentGroup = {};\n\n    for (const row of filteredRows) {\n      if (row.key && row.value !== undefined) {\n        currentGroup[row.key] = row.value;\n      } // Grup tamamlandığında yeni grup başlat (örnek logic)\n\n\n      if (Object.keys(currentGroup).length >= 5) {\n        groups.push({ ...currentGroup\n        });\n        currentGroup = {};\n      }\n    } // Son grubu ekle\n\n\n    if (Object.keys(currentGroup).length > 0) {\n      groups.push(currentGroup);\n    }\n\n    return groups;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","firstValueFrom","timeout","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","slice","btmResult","transformBtmCsv","processedData","length","properties","parametersData","forEach","p","includes","key","push","headerData","h","resultRows","map","row","fullRow","value","Object","entries","param","header","result","prettyJson","via","delimiter","detectDelimiter","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","options","csvFile","File","type","converterResult","convert","_btmErr","converter","getConverter","Error","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","lines","trim","split","delimiters","counts","d","line","inQuotes","i","best","max","c","csv","rows","parseTypeKeyValueCsv","rawRows","extractKeyValue","currentRecord","keys","finalProcessedData","record","DestinationIban","FinalAccountNo","TotalCount","OrderDetails","TransferAmount","TotalAmount","RegisterId","parts","part","replace","join","filter","toObject","keyValuePairs","pair","groupByTypeAsObjects","filteredRows","groups","currentGroup","undefined","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\JsonConverter-Btm\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\r\n\r\nexport interface OrchestratedResult {\r\n  result: any[];\r\n  properties?: string[];\r\n  prettyJson?: any;\r\n  via: string;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n}\r\n\r\nexport interface BtmTransformResult {\r\n  processedData: Array<Record<string, string>>;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n  rawRows: any[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n  constructor(\r\n    private xmlBtm: XmlBtmService,\r\n    private fileConverter: FileConverterService,\r\n    private csvFileConverter: CsvFileConverterService\r\n  ) {}\r\n\r\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\r\n  async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n    const xmlText = await this.readFileAsText(file);\r\n\r\n    // 1) BTM'yi dene (ör. 2 sn timeout)\r\n    try {\r\n      const csvString: string = await firstValueFrom(\r\n        this.xmlBtm.uploadXml(xmlText).pipe(\r\n          timeout(2000),\r\n          catchError(err => throwError(() => err))\r\n        )\r\n      );\r\n\r\n      console.log('BTM CSV:', csvString.slice(0, 200) + '...');\r\n\r\n      // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\r\n      const btmResult = this.transformBtmCsv(csvString);\r\n\r\n      // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\r\n      if (btmResult.processedData.length > 0) {\r\n        console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt');\r\n\r\n        // Flat tablo için gerekli property listesi\r\n        const properties = [\r\n          'DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails',\r\n          'TransferAmount', 'TotalAmount', 'RegisterId'\r\n        ];\r\n\r\n        // Parametre ve Header kayıtlarını da ekle\r\n        btmResult.parametersData.forEach((p: { key: string; value: string }) => {\r\n          if (!properties.includes(p.key)) {\r\n            properties.push(p.key);\r\n          }\r\n        });\r\n\r\n        btmResult.headerData.forEach((h: { key: string; value: string }) => {\r\n          if (!properties.includes(h.key)) {\r\n            properties.push(h.key);\r\n          }\r\n        });\r\n\r\n        // Flat tablo sonucu oluştur\r\n        const resultRows = btmResult.processedData.map((row: Record<string, string>) => {\r\n          const fullRow: Record<string, string> = {};\r\n\r\n          // Processed data alanlarını ekle\r\n          for (const [key, value] of Object.entries(row)) {\r\n            fullRow[key] = value || '-';\r\n          }\r\n\r\n          // Parameters alanlarını ekle\r\n          for (const param of btmResult.parametersData) {\r\n            if (!(param.key in fullRow)) {\r\n              fullRow[param.key] = param.value || '-';\r\n            }\r\n          }\r\n\r\n          // Header alanlarını ekle\r\n          for (const header of btmResult.headerData) {\r\n            if (!(header.key in fullRow)) {\r\n              fullRow[header.key] = header.value || '-';\r\n            }\r\n          }\r\n\r\n          return fullRow;\r\n        });\r\n\r\n        return {\r\n          result: resultRows,\r\n          properties,\r\n          prettyJson: btmResult, // BTM sonucunun tamamını prettyJson olarak kaydet\r\n          via: 'btm',\r\n          parametersData: btmResult.parametersData,\r\n          headerData: btmResult.headerData\r\n        };\r\n      }\r\n\r\n      // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\r\n      console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor');\r\n\r\n      // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\r\n      const delimiter = this.detectDelimiter(csvString);\r\n      const defaultOptions: CsvOptions = {\r\n        hasHeader: false,                 // BTM çıktısı çoğu zaman header'sız geliyor\r\n        skipEmptyLines: true,\r\n        selectedDelimiter: delimiter,\r\n        doubleQuoteWrap: false,\r\n        selectedRowDelimiter: 'newline',\r\n        rowPrefix: '',\r\n        rowSuffix: '',\r\n        selectedEncoding: 'utf-8',\r\n        selectedQuoteOption: 'none',\r\n        trimWhitespace: true,\r\n      };\r\n  const options: CsvOptions = { ...(csvOptions ?? defaultOptions), selectedDelimiter: delimiter };\r\n  const csvFile = new File([csvString], 'btm.csv', { type: 'text/csv' });\r\n  const converterResult = await this.csvFileConverter.convert(csvFile, options);\r\n\r\n      return {\r\n        result: converterResult.result,\r\n        properties: converterResult.properties,\r\n        prettyJson: converterResult.result,\r\n        via: 'btm',\r\n        parametersData: [], // Standart dönüşümde boş\r\n        headerData: []      // Standart dönüşümde boş\r\n      };\r\n    } catch (_btmErr) {\r\n      // 2) BTM başarısızsa local XML converter'a düş\r\n      const converter = this.fileConverter.getConverter('xml');\r\n      if (!converter) {\r\n        throw new Error('XML dönüştürücü bulunamadı (local).');\r\n      }\r\n\r\n      const localResult = await converter.convert(file, {\r\n        // UI'dan parametre gelirse burada forward edebilirsin\r\n      });\r\n\r\n      return {\r\n        result: localResult.result,\r\n        properties: localResult.properties,\r\n        prettyJson: localResult.result,\r\n        via: 'local',\r\n        parametersData: [],\r\n        headerData: []\r\n      };\r\n    }\r\n  }\r\n\r\n  // --------- Helpers ---------\r\n\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\r\n  private detectDelimiter(csvString: string): string {\r\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\r\n    const delimiters = [',', ';', '\\t', '|'];\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const d of delimiters) {\r\n      counts[d] = 0;\r\n      for (const line of lines) {\r\n        let inQuotes = false;\r\n        for (let i = 0; i < line.length; i++) {\r\n          if (line[i] === '\"') inQuotes = !inQuotes;\r\n          else if (line[i] === d && !inQuotes) counts[d]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let best = ',', max = 0;\r\n    for (const [d, c] of Object.entries(counts)) {\r\n      if (c > max) { max = c; best = d; }\r\n    }\r\n    return best;\r\n  }\r\n\r\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\r\n  private transformBtmCsv(csv: string): BtmTransformResult {\r\n    const rows = this.parseTypeKeyValueCsv(csv);\r\n\r\n    if (rows.length === 0) {\r\n      return { processedData: [], parametersData: [], headerData: [], rawRows: [] };\r\n    }\r\n\r\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\r\n    const headerData     = this.extractKeyValue(rows, 'Header');\r\n\r\n    const processedData: Array<Record<string, string>> = [];\r\n    let currentRecord: Record<string, string> = {};\r\n\r\n    for (const row of rows) {\r\n      if (row.type === 'IbanHesap' && row.key === 'DestinationIban') {\r\n        if (Object.keys(currentRecord).length > 0) {\r\n          processedData.push(currentRecord);\r\n        }\r\n        currentRecord = {};\r\n      }\r\n\r\n      if (row.type === 'IbanHesap' || row.type === 'Details') {\r\n        currentRecord[row.key] = row.value;\r\n      }\r\n    }\r\n\r\n    if (Object.keys(currentRecord).length > 0) {\r\n      processedData.push(currentRecord);\r\n    }\r\n\r\n    const finalProcessedData = processedData.map(record => ({\r\n      DestinationIban: record['DestinationIban'] || record['Iban'] || '',\r\n      FinalAccountNo:  record['FinalAccountNo']  || record['HesapNo'] || '',\r\n      TotalCount:      record['TotalCount'] || '',\r\n      OrderDetails:    record['OrderDetails'] || record['Detail'] || '',\r\n      TransferAmount:  record['TransferAmount'] || record['Miktar'] || '',\r\n      TotalAmount:     record['TotalAmount'] || record['ToplamTutar'] || record['Toplam'] || '',\r\n      RegisterId:      record['RegisterId'] || record['Sicil'] || record['SicilNo'] || record['RegistrationId'] || ''\r\n    }));\r\n\r\n    console.log('Sıralı işleme sonrası oluşturulan data:', finalProcessedData.length, finalProcessedData);\r\n    return {\r\n      processedData: finalProcessedData,\r\n      parametersData,\r\n      headerData,\r\n      rawRows: rows\r\n    };\r\n  }\r\n\r\n  // Eksik metod implementasyonları\r\n  private parseTypeKeyValueCsv(csv: string): any[] {\r\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\r\n    const lines = csv.trim().split(/\\r?\\n/);\r\n    const rows: any[] = [];\r\n    \r\n    for (const line of lines) {\r\n      if (line.trim()) {\r\n        // Basit CSV parsing - gerçek implementasyonunuza göre ayarlayın\r\n        const parts = line.split(',').map(part => part.trim().replace(/\"/g, ''));\r\n        if (parts.length >= 3) {\r\n          rows.push({\r\n            type: parts[0],\r\n            key: parts[1],\r\n            value: parts.slice(2).join(',') // Eğer value'da virgül varsa birleştir\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return rows;\r\n  }\r\n\r\n  private extractKeyValue(rows: any[], type: string): Array<{ key: string; value: string }> {\r\n    return rows\r\n      .filter((row: any) => row.type === type)\r\n      .map((row: any) => ({\r\n        key: row.key || '',\r\n        value: row.value || ''\r\n      }));\r\n  }\r\n\r\n  private toObject(keyValuePairs: Array<{ key: string; value: string }>): Record<string, string> {\r\n    const result: Record<string, string> = {};\r\n    for (const pair of keyValuePairs) {\r\n      result[pair.key] = pair.value;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private groupByTypeAsObjects(rows: any[], type: string): Array<Record<string, string>> {\r\n    const filteredRows = rows.filter((row: any) => row.type === type);\r\n    const groups: Array<Record<string, string>> = [];\r\n    \r\n    // Basit gruplama - gerçek implementasyonunuza göre ayarlayın\r\n    let currentGroup: Record<string, string> = {};\r\n    \r\n    for (const row of filteredRows) {\r\n      if (row.key && row.value !== undefined) {\r\n        currentGroup[row.key] = row.value;\r\n      }\r\n      \r\n      // Grup tamamlandığında yeni grup başlat (örnek logic)\r\n      if (Object.keys(currentGroup).length >= 5) {\r\n        groups.push({ ...currentGroup });\r\n        currentGroup = {};\r\n      }\r\n    }\r\n    \r\n    // Son grubu ekle\r\n    if (Object.keys(currentGroup).length > 0) {\r\n      groups.push(currentGroup);\r\n    }\r\n    \r\n    return groups;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}