{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV çıktısı:', csvString); // Detect delimiter and parse rows\n\n        const delimiter = _this.detectDelimiter(csvString); // Use provided CSV options from UI when available, otherwise fall back to UI defaults\n\n\n        const defaultOptions = {\n          hasHeader: true,\n          skipEmptyLines: true,\n          selectedDelimiter: delimiter,\n          doubleQuoteWrap: true,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        const options = csvOptions ? { ...csvOptions,\n          selectedDelimiter: csvOptions.selectedDelimiter && csvOptions.selectedDelimiter.trim() !== '' ? csvOptions.selectedDelimiter : delimiter\n        } : defaultOptions;\n\n        const parsedRows = _this.parseCsvString(csvString, options.selectedDelimiter || delimiter); // Heuristic: BTM frequently emits Type,Key,Value rows (Parameters/Header/Details)\n\n\n        const typeNames = new Set(['Parameters', 'Header', 'Details']);\n        const typedFormatCount = parsedRows.filter(r => r.length >= 2 && typeNames.has((r[0] || '').trim())).length;\n        const typedFormat = typedFormatCount > 0;\n\n        if (typedFormat) {\n          // Convert parsed rows into typed records\n          const typedRecords = parsedRows.map(r => ({\n            Type: (r[0] || '').trim(),\n            Key: (r[1] || '').trim(),\n            Value: (r[2] || '').trim()\n          })).filter(t => t.Type && t.Key); // Shared Parameters/Header\n\n          const sharedRecords = typedRecords.filter(r => r.Type === 'Parameters' || r.Type === 'Header'); // Group Details into records by RegisterId if present\n\n          const groups = [];\n          let current = [];\n\n          for (const rec of typedRecords) {\n            if (rec.Type === 'Details') {\n              if (rec.Key === 'RegisterId' && current.length > 0) {\n                groups.push([...sharedRecords, ...current]);\n                current = [];\n              }\n\n              current.push(rec);\n            }\n          }\n\n          if (current.length > 0) groups.push([...sharedRecords, ...current]);\n          if (groups.length === 0 && sharedRecords.length > 0) groups.push(sharedRecords);\n          const rowsObjects = groups.map(g => _this.transformBtmJson(g));\n          const properties = Array.from(new Set(rowsObjects.flatMap(obj => Object.keys(obj))));\n          return {\n            result: rowsObjects,\n            properties: properties.length ? properties : ['Type', 'Key', 'Value'],\n            prettyJson: rowsObjects,\n            via: 'btm'\n          };\n        } // Not typed format -> delegate to CSV converter\n\n\n        const csvFile = new File([csvString], 'btm.csv', {\n          type: 'text/csv'\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, options);\n        console.log('CSV converter returned:', converterResult);\n        return { ...converterResult,\n          prettyJson: converterResult.result,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n  /**\r\n   * Geliştirilmiş CSV parser - quoted değerleri ve farklı delimiter'ları destekler\r\n   */\n\n\n  parseCsvString(csvString, delimiter = ',') {\n    const lines = csvString.trim().split(/\\r?\\n/);\n    const result = [];\n\n    for (const line of lines) {\n      if (!line.trim()) continue; // Boş satırları atla\n\n      const row = this.parseCsvLine(line, delimiter);\n      result.push(row);\n    }\n\n    return result;\n  }\n  /**\r\n   * Tek bir CSV satırını parse eder - quoted değerleri ve delimiter'ları düzgün işler\r\n   */\n\n\n  parseCsvLine(line, delimiter = ',') {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n\n      if (char === '\"') {\n        if (inQuotes && nextChar === '\"') {\n          // Escaped quote (\"\")\n          current += '\"';\n          i += 2;\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === delimiter && !inQuotes) {\n        // Field separator outside of quotes\n        result.push(current.trim());\n        current = '';\n        i++;\n      } else {\n        // Regular character\n        current += char;\n        i++;\n      }\n    } // Add the last field\n\n\n    result.push(current.trim()); // Clean up quotes from values if needed\n\n    return result.map(value => {\n      // Remove surrounding quotes if present\n      if (value.startsWith('\"') && value.endsWith('\"')) {\n        return value.slice(1, -1);\n      }\n\n      return value;\n    });\n  }\n  /**\r\n   * Otomatik delimiter tespiti\r\n   */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5); // İlk 5 satırı kontrol et\n\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const delimiter of delimiters) {\n      counts[delimiter] = 0;\n\n      for (const line of lines) {\n        // Quotes içindeki delimiter'ları sayma\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') {\n            inQuotes = !inQuotes;\n          } else if (line[i] === delimiter && !inQuotes) {\n            counts[delimiter]++;\n          }\n        }\n      }\n    } // En çok bulunan delimiter'ı döndür\n\n\n    let maxCount = 0;\n    let bestDelimiter = ',';\n\n    for (const [delimiter, count] of Object.entries(counts)) {\n      if (count > maxCount) {\n        maxCount = count;\n        bestDelimiter = delimiter;\n      }\n    }\n\n    console.log('Delimiter tespiti:', counts, 'Seçilen:', bestDelimiter);\n    return bestDelimiter;\n  } // BTM'den gelen Type/Key/Value formatını düz objeye çevir\n\n\n  transformBtmJson(flatData) {\n    // Tüm Key/Value çiftlerini tek bir objeye topla\n    const result = {};\n\n    for (const row of flatData || []) {\n      const {\n        Key,\n        Value\n      } = row || {}; // Her Key/Value çiftini direkt objeye ekle\n\n      if (Key && Value !== undefined) {\n        result[Key] = Value;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","delimiter","detectDelimiter","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","options","trim","parsedRows","parseCsvString","typeNames","Set","typedFormatCount","filter","r","length","has","typedFormat","typedRecords","map","Type","Key","Value","t","sharedRecords","groups","current","rec","push","rowsObjects","g","transformBtmJson","properties","Array","from","flatMap","obj","Object","keys","result","prettyJson","via","csvFile","File","type","converterResult","convert","_btmErr","converter","getConverter","Error","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","lines","split","line","row","parseCsvLine","inQuotes","i","char","nextChar","value","startsWith","endsWith","slice","delimiters","counts","maxCount","bestDelimiter","count","entries","flatData","undefined","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n            \r\n            console.log('BTM CSV çıktısı:', csvString);\r\n\r\n            // Detect delimiter and parse rows\r\n            const delimiter = this.detectDelimiter(csvString);\r\n            // Use provided CSV options from UI when available, otherwise fall back to UI defaults\r\n            const defaultOptions: CsvOptions = {\r\n                hasHeader: true,\r\n                skipEmptyLines: true,\r\n                selectedDelimiter: delimiter,\r\n                doubleQuoteWrap: true,\r\n                selectedRowDelimiter: 'newline',\r\n                rowPrefix: '',\r\n                rowSuffix: '',\r\n                selectedEncoding: 'utf-8',\r\n                selectedQuoteOption: 'none',\r\n                trimWhitespace: true,\r\n            };\r\n\r\n            const options = csvOptions\r\n                ? { ...csvOptions, selectedDelimiter: csvOptions.selectedDelimiter && csvOptions.selectedDelimiter.trim() !== '' ? csvOptions.selectedDelimiter : delimiter }\r\n                : defaultOptions;\r\n\r\n            const parsedRows = this.parseCsvString(csvString, options.selectedDelimiter || delimiter);\r\n\r\n            // Heuristic: BTM frequently emits Type,Key,Value rows (Parameters/Header/Details)\r\n            const typeNames = new Set(['Parameters', 'Header', 'Details']);\r\n            const typedFormatCount = parsedRows.filter(r => r.length >= 2 && typeNames.has((r[0] || '').trim())).length;\r\n            const typedFormat = typedFormatCount > 0;\r\n\r\n            if (typedFormat) {\r\n                // Convert parsed rows into typed records\r\n                const typedRecords = parsedRows.map(r => ({\r\n                    Type: (r[0] || '').trim(),\r\n                    Key: (r[1] || '').trim(),\r\n                    Value: (r[2] || '').trim(),\r\n                })).filter((t: any) => t.Type && t.Key);\r\n\r\n                // Shared Parameters/Header\r\n                const sharedRecords = typedRecords.filter((r: any) => r.Type === 'Parameters' || r.Type === 'Header');\r\n\r\n                // Group Details into records by RegisterId if present\r\n                const groups: any[][] = [];\r\n                let current: any[] = [];\r\n                for (const rec of typedRecords) {\r\n                    if (rec.Type === 'Details') {\r\n                        if (rec.Key === 'RegisterId' && current.length > 0) {\r\n                            groups.push([...sharedRecords, ...current]);\r\n                            current = [];\r\n                        }\r\n                        current.push(rec);\r\n                    }\r\n                }\r\n                if (current.length > 0) groups.push([...sharedRecords, ...current]);\r\n                if (groups.length === 0 && sharedRecords.length > 0) groups.push(sharedRecords);\r\n\r\n                const rowsObjects = groups.map(g => this.transformBtmJson(g));\r\n                const properties = Array.from(new Set(rowsObjects.flatMap(obj => Object.keys(obj))));\r\n\r\n                return {\r\n                    result: rowsObjects,\r\n                    properties: properties.length ? properties : ['Type', 'Key', 'Value'],\r\n                    prettyJson: rowsObjects,\r\n                    via: 'btm',\r\n                };\r\n            }\r\n\r\n            // Not typed format -> delegate to CSV converter\r\n            const csvFile = new File([csvString], 'btm.csv', { type: 'text/csv' });\r\n            const converterResult = await this.csvFileConverter.convert(csvFile, options);\r\n            console.log('CSV converter returned:', converterResult);\r\n\r\n            return {\r\n                ...converterResult,\r\n                prettyJson: converterResult.result,\r\n                via: 'btm',\r\n            };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Geliştirilmiş CSV parser - quoted değerleri ve farklı delimiter'ları destekler\r\n     */\r\n    private parseCsvString(csvString: string, delimiter: string = ','): string[][] {\r\n        const lines = csvString.trim().split(/\\r?\\n/);\r\n        const result: string[][] = [];\r\n\r\n        for (const line of lines) {\r\n            if (!line.trim()) continue; // Boş satırları atla\r\n            \r\n            const row = this.parseCsvLine(line, delimiter);\r\n            result.push(row);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Tek bir CSV satırını parse eder - quoted değerleri ve delimiter'ları düzgün işler\r\n     */\r\n    private parseCsvLine(line: string, delimiter: string = ','): string[] {\r\n        const result: string[] = [];\r\n        let current = '';\r\n        let inQuotes = false;\r\n        let i = 0;\r\n\r\n        while (i < line.length) {\r\n            const char = line[i];\r\n            const nextChar = line[i + 1];\r\n\r\n            if (char === '\"') {\r\n                if (inQuotes && nextChar === '\"') {\r\n                    // Escaped quote (\"\")\r\n                    current += '\"';\r\n                    i += 2;\r\n                } else {\r\n                    // Toggle quote state\r\n                    inQuotes = !inQuotes;\r\n                    i++;\r\n                }\r\n            } else if (char === delimiter && !inQuotes) {\r\n                // Field separator outside of quotes\r\n                result.push(current.trim());\r\n                current = '';\r\n                i++;\r\n            } else {\r\n                // Regular character\r\n                current += char;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // Add the last field\r\n        result.push(current.trim());\r\n\r\n        // Clean up quotes from values if needed\r\n        return result.map(value => {\r\n            // Remove surrounding quotes if present\r\n            if (value.startsWith('\"') && value.endsWith('\"')) {\r\n                return value.slice(1, -1);\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Otomatik delimiter tespiti\r\n     */\r\n    private detectDelimiter(csvString: string): string {\r\n        const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5); // İlk 5 satırı kontrol et\r\n        const delimiters = [',', ';', '\\t', '|'];\r\n        const counts: { [key: string]: number } = {};\r\n\r\n        for (const delimiter of delimiters) {\r\n            counts[delimiter] = 0;\r\n            for (const line of lines) {\r\n                // Quotes içindeki delimiter'ları sayma\r\n                let inQuotes = false;\r\n                for (let i = 0; i < line.length; i++) {\r\n                    if (line[i] === '\"') {\r\n                        inQuotes = !inQuotes;\r\n                    } else if (line[i] === delimiter && !inQuotes) {\r\n                        counts[delimiter]++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // En çok bulunan delimiter'ı döndür\r\n        let maxCount = 0;\r\n        let bestDelimiter = ',';\r\n        for (const [delimiter, count] of Object.entries(counts)) {\r\n            if (count > maxCount) {\r\n                maxCount = count;\r\n                bestDelimiter = delimiter;\r\n            }\r\n        }\r\n\r\n        console.log('Delimiter tespiti:', counts, 'Seçilen:', bestDelimiter);\r\n        return bestDelimiter;\r\n    }\r\n\r\n    // BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n    private transformBtmJson(flatData: Array<{ Type: string; Key: string; Value: string }>) {\r\n        // Tüm Key/Value çiftlerini tek bir objeye topla\r\n        const result: any = {};\r\n        \r\n        for (const row of flatData || []) {\r\n            const { Key, Value } = row || ({} as any);\r\n            // Her Key/Value çiftini direkt objeye ekle\r\n            if (Key && Value !== undefined) {\r\n                result[Key] = Value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}