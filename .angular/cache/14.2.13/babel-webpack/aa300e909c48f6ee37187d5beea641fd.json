{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/JSON-Transform-Project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nlet FileUploaderComponent = class FileUploaderComponent {\n  constructor(fileConverterService) {\n    this.fileConverterService = fileConverterService;\n    this.onConvert = new EventEmitter();\n    this.onError = new EventEmitter();\n    this.onFileClear = new EventEmitter();\n    this.onOptionsChange = new EventEmitter();\n    this.selectedFile = null;\n    this.fileType = null;\n    this.isProcessing = false; // CSV options\n\n    this.hasHeader = true;\n    this.skipEmptyLines = true;\n    this.selectedDelimiter = ',';\n    this.doubleQuoteWrap = true;\n    this.selectedRowDelimiter = 'newline';\n    this.rowPrefix = '';\n    this.rowSuffix = '';\n    this.selectedEncoding = 'utf-8';\n    this.selectedQuoteOption = 'none';\n    this.trimWhitespace = true; // TXT options\n\n    this.fieldCount = 3;\n    this.fieldConfigs = [{\n      start: 0,\n      length: 10\n    }, {\n      start: 10,\n      length: 10\n    }, {\n      start: 20,\n      length: 10\n    }]; // XML options\n\n    this.xmlRootElement = '';\n    this.xmlFieldMapping = ''; // Kullanılabilir CSV ayar seçenekleri\n\n    this.delimiterOptions = [{\n      value: ',',\n      label: 'Virgül (,)'\n    }, {\n      value: ';',\n      label: 'Noktalı Virgül (;)'\n    }, {\n      value: '\\t',\n      label: 'Sekme (Tab)'\n    }, {\n      value: '|',\n      label: 'Dikey Çizgi (|)'\n    }];\n    this.rowDelimiterOptions = [{\n      value: 'newline',\n      label: 'Yeni Satır (\\\\n)'\n    }, {\n      value: 'carriage',\n      label: 'Satır Başı (\\\\r)'\n    }, {\n      value: '\\r\\n',\n      label: 'Windows (\\\\r\\\\n)'\n    }];\n    this.quoteOptions = [{\n      value: 'none',\n      label: 'Yok'\n    }, {\n      value: 'single',\n      label: 'Tek Tırnak (\\')'\n    }, {\n      value: 'double',\n      label: 'Çift Tırnak (\")'\n    }];\n    this.encodingOptions = [{\n      value: 'utf-8',\n      label: 'UTF-8'\n    }, {\n      value: 'iso-8859-1',\n      label: 'ISO-8859-1'\n    }, {\n      value: 'windows-1254',\n      label: 'Windows-1254 (Türkçe)'\n    }];\n  }\n\n  onFileSelect(event) {\n    const files = event.target.files;\n\n    if (files && files.length > 0) {\n      this.selectedFile = files[0];\n    }\n  }\n\n  clearSelection() {\n    this.selectedFile = null;\n    this.fileType = null;\n    const fileInput = document.getElementById('csvFileInput');\n    if (fileInput) fileInput.value = '';\n    this.onFileClear.emit();\n  }\n\n  getCsvOptions() {\n    return {\n      hasHeader: this.hasHeader,\n      skipEmptyLines: this.skipEmptyLines,\n      selectedDelimiter: this.selectedDelimiter,\n      doubleQuoteWrap: this.doubleQuoteWrap,\n      selectedRowDelimiter: this.selectedRowDelimiter,\n      rowPrefix: this.rowPrefix,\n      rowSuffix: this.rowSuffix,\n      selectedEncoding: this.selectedEncoding,\n      selectedQuoteOption: this.selectedQuoteOption,\n      trimWhitespace: this.trimWhitespace\n    };\n  }\n\n  getTxtOptions() {\n    return {\n      fieldCount: this.fieldCount,\n      startPositions: this.fieldConfigs.map(c => c.start),\n      lengths: this.fieldConfigs.map(c => c.length),\n      hasHeader: this.hasHeader,\n      skipEmptyLines: this.skipEmptyLines\n    };\n  }\n\n  parseMapping(text) {\n    try {\n      return text ? JSON.parse(text) : undefined;\n    } catch {\n      this.onError.emit('Field Mapping JSON formatı hatalı.');\n      return undefined;\n    }\n  }\n\n  processData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.selectedFile || !_this.fileType) {\n        _this.onError.emit('Dosya ve tür seçilmelidir.');\n\n        return;\n      }\n\n      const converter = _this.fileConverterService.getConverter(_this.fileType);\n\n      if (!converter) {\n        _this.onError.emit('Desteklenmeyen dosya türü.');\n\n        return;\n      }\n\n      _this.isProcessing = true;\n\n      try {\n        let options = null;\n        if (_this.fileType === 'csv') options = _this.getCsvOptions();else if (_this.fileType === 'txt') options = _this.getTxtOptions();else if (_this.fileType === 'xml') {\n          options = {\n            rootElement: _this.xmlRootElement || undefined,\n            fieldMapping: _this.parseMapping(_this.xmlFieldMapping)\n          };\n        }\n        const result = yield converter.convert(_this.selectedFile, options);\n\n        _this.onOptionsChange.emit(options);\n\n        _this.onConvert.emit(result);\n      } catch (error) {\n        _this.onError.emit('Hata: ' + error);\n      } finally {\n        _this.isProcessing = false;\n      }\n    })();\n  } // Option triggers\n\n\n  emitOptions() {\n    const options = this.getCsvOptions();\n    this.onOptionsChange.emit(options);\n  }\n\n  onHeaderCheckboxChange() {\n    this.emitOptions();\n  }\n\n  onSkipEmptyLinesChange() {\n    this.emitOptions();\n  }\n\n  onFieldCountChange() {\n    const count = this.fieldCount;\n\n    while (this.fieldConfigs.length < count) {\n      const last = this.fieldConfigs[this.fieldConfigs.length - 1];\n      const newStart = last ? last.start + last.length : 0;\n      this.fieldConfigs.push({\n        start: newStart,\n        length: 10\n      });\n    }\n\n    while (this.fieldConfigs.length > count) {\n      this.fieldConfigs.pop();\n    }\n  }\n\n  onFieldConfigChange() {}\n\n  onDelimiterChange() {\n    this.emitOptions();\n  }\n\n  onRowDelimiterChange() {\n    this.emitOptions();\n  }\n\n  onQuoteOptionChange() {\n    this.doubleQuoteWrap = this.selectedQuoteOption === 'double';\n    this.emitOptions();\n  }\n\n  onEncodingChange() {\n    this.emitOptions();\n  }\n\n  onRowPrefixChange() {\n    this.emitOptions();\n  }\n\n  onRowSuffixChange() {\n    this.emitOptions();\n  }\n\n  onTrimWhitespaceChange() {\n    this.emitOptions();\n  }\n\n  onDoubleQuoteWrapChange() {\n    this.selectedQuoteOption = this.doubleQuoteWrap ? 'double' : 'none';\n    this.emitOptions();\n  }\n\n};\n\n__decorate([Output()], FileUploaderComponent.prototype, \"onConvert\", void 0);\n\n__decorate([Output()], FileUploaderComponent.prototype, \"onError\", void 0);\n\n__decorate([Output()], FileUploaderComponent.prototype, \"onFileClear\", void 0);\n\n__decorate([Output()], FileUploaderComponent.prototype, \"onOptionsChange\", void 0);\n\nFileUploaderComponent = __decorate([Component({\n  selector: 'app-file-uploader',\n  templateUrl: './file-uploader.component.html',\n  styleUrls: ['./file-uploader.component.scss']\n})], FileUploaderComponent);\nexport { FileUploaderComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Output","FileUploaderComponent","constructor","fileConverterService","start","length","value","label","onFileSelect","event","files","target","selectedFile","clearSelection","fileType","fileInput","document","getElementById","onFileClear","emit","getCsvOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","getTxtOptions","fieldCount","startPositions","fieldConfigs","map","c","lengths","parseMapping","text","JSON","parse","undefined","onError","processData","converter","getConverter","isProcessing","options","rootElement","xmlRootElement","fieldMapping","xmlFieldMapping","result","convert","onOptionsChange","onConvert","error","emitOptions","onHeaderCheckboxChange","onSkipEmptyLinesChange","onFieldCountChange","count","last","newStart","push","pop","onFieldConfigChange","onDelimiterChange","onRowDelimiterChange","onQuoteOptionChange","onEncodingChange","onRowPrefixChange","onRowSuffixChange","onTrimWhitespaceChange","onDoubleQuoteWrapChange","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\JSON-Transform-Project\\src\\app\\components\\file-uploader\\file-uploader.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { CsvOptions } from 'src/app/services/csv-converter.service';\nimport { TxtToJsonOptions } from 'src/app/services/txt-to-json.service';\nimport { FileConverterService } from 'src/app/services/file-converter.service';\n\n@Component({\n    selector: 'app-file-uploader',\n    templateUrl: './file-uploader.component.html',\n    styleUrls: ['./file-uploader.component.scss'],\n})\nexport class FileUploaderComponent {\n    @Output() onConvert = new EventEmitter<any>();\n    @Output() onError = new EventEmitter<string>();\n    @Output() onFileClear = new EventEmitter<void>();\n    @Output() onOptionsChange = new EventEmitter<any>();\n\n    selectedFile: File | null = null;\n    fileType: 'csv' | 'txt' | 'xml' | null = null;\n    isProcessing = false;\n\n    // CSV options\n    hasHeader = true;\n    skipEmptyLines = true;\n    selectedDelimiter = ',';\n    doubleQuoteWrap = true;\n    selectedRowDelimiter = 'newline';\n    rowPrefix = '';\n    rowSuffix = '';\n    selectedEncoding = 'utf-8';\n    selectedQuoteOption: 'none' | 'single' | 'double' = 'none';\n    trimWhitespace = true;\n\n    // TXT options\n    fieldCount = 3;\n    fieldConfigs = [\n        { start: 0, length: 10 },\n        { start: 10, length: 10 },\n        { start: 20, length: 10 },\n    ];\n\n    // XML options\n    xmlRootElement: string = '';\n    xmlFieldMapping: string = '';\n\n    constructor(private fileConverterService: FileConverterService) { }\n\n    // Kullanılabilir CSV ayar seçenekleri\n    delimiterOptions = [\n        { value: ',', label: 'Virgül (,)' },\n        { value: ';', label: 'Noktalı Virgül (;)' },\n        { value: '\\t', label: 'Sekme (Tab)' },\n        { value: '|', label: 'Dikey Çizgi (|)' },\n    ];\n\n    rowDelimiterOptions = [\n        { value: 'newline', label: 'Yeni Satır (\\\\n)' },\n        { value: 'carriage', label: 'Satır Başı (\\\\r)' },\n        { value: '\\r\\n', label: 'Windows (\\\\r\\\\n)' },\n    ];\n\n    quoteOptions = [\n        { value: 'none', label: 'Yok' },\n        { value: 'single', label: 'Tek Tırnak (\\')' },\n        { value: 'double', label: 'Çift Tırnak (\")' },\n    ];\n\n    encodingOptions = [\n        { value: 'utf-8', label: 'UTF-8' },\n        { value: 'iso-8859-1', label: 'ISO-8859-1' },\n        { value: 'windows-1254', label: 'Windows-1254 (Türkçe)' },\n    ];\n\n\n    onFileSelect(event: any): void {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            this.selectedFile = files[0];\n        }\n    }\n\n    clearSelection(): void {\n        this.selectedFile = null;\n        this.fileType = null;\n        const fileInput = document.getElementById('csvFileInput') as HTMLInputElement;\n        if (fileInput) fileInput.value = '';\n        this.onFileClear.emit();\n    }\n\n    getCsvOptions(): CsvOptions {\n        return {\n            hasHeader: this.hasHeader,\n            skipEmptyLines: this.skipEmptyLines,\n            selectedDelimiter: this.selectedDelimiter,\n            doubleQuoteWrap: this.doubleQuoteWrap,\n            selectedRowDelimiter: this.selectedRowDelimiter,\n            rowPrefix: this.rowPrefix,\n            rowSuffix: this.rowSuffix,\n            selectedEncoding: this.selectedEncoding,\n            selectedQuoteOption: this.selectedQuoteOption,\n            trimWhitespace: this.trimWhitespace,\n        };\n    }\n\n    getTxtOptions(): TxtToJsonOptions {\n        return {\n            fieldCount: this.fieldCount,\n            startPositions: this.fieldConfigs.map(c => c.start),\n            lengths: this.fieldConfigs.map(c => c.length),\n            hasHeader: this.hasHeader,\n            skipEmptyLines: this.skipEmptyLines,\n        };\n    }\n\n    parseMapping(text: string): { [key: string]: string[] } | undefined {\n        try {\n            return text ? JSON.parse(text) : undefined;\n        } catch {\n            this.onError.emit('Field Mapping JSON formatı hatalı.');\n            return undefined;\n        }\n    }\n\n    async processData(): Promise<void> {\n        if (!this.selectedFile || !this.fileType) {\n            this.onError.emit('Dosya ve tür seçilmelidir.');\n            return;\n        }\n\n        const converter = this.fileConverterService.getConverter(this.fileType);\n        if (!converter) {\n            this.onError.emit('Desteklenmeyen dosya türü.');\n            return;\n        }\n\n        this.isProcessing = true;\n\n        try {\n            let options: any = null;\n\n            if (this.fileType === 'csv') options = this.getCsvOptions();\n            else if (this.fileType === 'txt') options = this.getTxtOptions();\n            else if (this.fileType === 'xml') {\n                options = {\n                    rootElement: this.xmlRootElement || undefined,\n                    fieldMapping: this.parseMapping(this.xmlFieldMapping)\n                };\n            }\n\n            const result = await converter.convert(this.selectedFile, options);\n            this.onOptionsChange.emit(options);\n            this.onConvert.emit(result);\n        } catch (error) {\n            this.onError.emit('Hata: ' + error);\n        } finally {\n            this.isProcessing = false;\n        }\n    }\n\n    // Option triggers\n    private emitOptions(): void {\n        const options = this.getCsvOptions();\n        this.onOptionsChange.emit(options);\n    }\n\n    onHeaderCheckboxChange(): void { this.emitOptions(); }\n    onSkipEmptyLinesChange(): void { this.emitOptions(); }\n    onFieldCountChange(): void {\n        const count = this.fieldCount;\n        while (this.fieldConfigs.length < count) {\n            const last = this.fieldConfigs[this.fieldConfigs.length - 1];\n            const newStart = last ? last.start + last.length : 0;\n            this.fieldConfigs.push({ start: newStart, length: 10 });\n        }\n        while (this.fieldConfigs.length > count) {\n            this.fieldConfigs.pop();\n        }\n    }\n    onFieldConfigChange(): void { }\n    onDelimiterChange(): void { this.emitOptions(); }\n    onRowDelimiterChange(): void { this.emitOptions(); }\n    onQuoteOptionChange(): void {\n        this.doubleQuoteWrap = this.selectedQuoteOption === 'double';\n        this.emitOptions();\n    }\n    onEncodingChange(): void { this.emitOptions(); }\n    onRowPrefixChange(): void { this.emitOptions(); }\n    onRowSuffixChange(): void { this.emitOptions(); }\n    onTrimWhitespaceChange(): void { this.emitOptions(); }\n    onDoubleQuoteWrapChange(): void {\n        this.selectedQuoteOption = this.doubleQuoteWrap ? 'double' : 'none';\n        this.emitOptions();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}