{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV çıktısı:', csvString); // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\n        // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\n\n        const csvOptions = {\n          hasHeader: true,\n          skipEmptyLines: true,\n          selectedDelimiter: ',',\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        console.log('BTM CSV string:', csvString); // CSV string'i direkt parse edelim\n\n        const lines = csvString.trim().split(/\\r?\\n/);\n        const rows = lines.map(line => {\n          const [type, key, value] = line.split(',').map(v => v.trim());\n          return {\n            Type: type,\n            Key: key,\n            Value: value\n          };\n        });\n        console.log('Parsed rows:', rows); // JSON'a dönüştür\n\n        const pretty = _this.transformBtmJson(rows);\n\n        console.log('Final JSON:', pretty);\n        const properties = ['Type', 'Key', 'Value'];\n        return {\n          result: rows,\n          properties,\n          prettyJson: pretty,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  } // ...existing code...\n  // BTM'den gelen Type/Key/Value formatını düz objeye çevir\n\n\n  transformBtmJson(flatData) {\n    // Tüm Key/Value çiftlerini tek bir objeye topla\n    const result = {};\n\n    for (const row of flatData || []) {\n      const {\n        Key,\n        Value\n      } = row || {}; // Her Key/Value çiftini direkt objeye ekle\n\n      if (Key && Value !== undefined) {\n        result[Key] = Value;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","csvOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","lines","trim","split","rows","map","line","type","key","value","v","Type","Key","Value","pretty","transformBtmJson","properties","result","prettyJson","via","_btmErr","converter","getConverter","Error","localResult","convert","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","flatData","row","undefined","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n            \r\n            console.log('BTM CSV çıktısı:', csvString);\r\n\r\n            // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\r\n            // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\r\n            const csvOptions = {\r\n                hasHeader: true,\r\n                skipEmptyLines: true,\r\n                selectedDelimiter: ',',\r\n                doubleQuoteWrap: false,\r\n                selectedRowDelimiter: 'newline',\r\n                rowPrefix: '',\r\n                rowSuffix: '',\r\n                selectedEncoding: 'utf-8',\r\n                selectedQuoteOption: 'none',\r\n                trimWhitespace: true\r\n            };\r\n\r\n            console.log('BTM CSV string:', csvString);\r\n            \r\n            // CSV string'i direkt parse edelim\r\n            const lines = csvString.trim().split(/\\r?\\n/);\r\n            const rows = lines.map(line => {\r\n                const [type, key, value] = line.split(',').map(v => v.trim());\r\n                return { Type: type, Key: key, Value: value };\r\n            });\r\n\r\n            console.log('Parsed rows:', rows);\r\n            \r\n            // JSON'a dönüştür\r\n            const pretty = this.transformBtmJson(rows);\r\n            \r\n            console.log('Final JSON:', pretty);\r\n\r\n            const properties = ['Type', 'Key', 'Value'];\r\n            return { result: rows, properties, prettyJson: pretty, via: 'btm' };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    // BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n    private transformBtmJson(flatData: Array<{ Type: string; Key: string; Value: string }>) {\r\n        // Tüm Key/Value çiftlerini tek bir objeye topla\r\n        const result: any = {};\r\n        \r\n        for (const row of flatData || []) {\r\n            const { Key, Value } = row || ({} as any);\r\n            // Her Key/Value çiftini direkt objeye ekle\r\n            if (Key && Value !== undefined) {\r\n                result[Key] = Value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}