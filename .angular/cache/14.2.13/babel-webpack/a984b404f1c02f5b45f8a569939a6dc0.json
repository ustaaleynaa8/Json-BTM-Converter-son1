{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/JsonConverter-Btm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (ör. 2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV:', csvString.slice(0, 200) + '...'); // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\n\n        const btmResult = _this.transformBtmCsv(csvString); // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\n\n\n        if (btmResult.processedData.length > 0) {\n          console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt'); // Flat tablo için gerekli property listesi\n\n          const properties = ['DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails', 'TransferAmount', 'TotalAmount', 'RegisterId']; // Parametre ve Header kayıtlarını da ekle\n\n          btmResult.parametersData.forEach(p => {\n            if (!properties.includes(p.key)) {\n              properties.push(p.key);\n            }\n          });\n          btmResult.headerData.forEach(h => {\n            if (!properties.includes(h.key)) {\n              properties.push(h.key);\n            }\n          }); // Flat tablo sonucu oluştur\n\n          const resultRows = btmResult.processedData.map(row => {\n            const fullRow = {}; // Processed data alanlarını ekle\n\n            for (const [key, value] of Object.entries(row)) {\n              fullRow[key] = value || '-';\n            } // Parameters alanlarını ekle\n\n\n            for (const param of btmResult.parametersData) {\n              if (!(param.key in fullRow)) {\n                fullRow[param.key] = param.value || '-';\n              }\n            } // Header alanlarını ekle\n\n\n            for (const header of btmResult.headerData) {\n              if (!(header.key in fullRow)) {\n                fullRow[header.key] = header.value || '-';\n              }\n            }\n\n            return fullRow;\n          });\n          return {\n            result: resultRows,\n            properties,\n            prettyJson: btmResult,\n            via: 'btm',\n            parametersData: btmResult.parametersData,\n            headerData: btmResult.headerData\n          };\n        } // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\n\n\n        console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor'); // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\n\n        const delimiter = _this.detectDelimiter(csvString);\n\n        const defaultOptions = {\n          hasHeader: false,\n          skipEmptyLines: true,\n          selectedDelimiter: delimiter,\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        const options = { ...(csvOptions ?? defaultOptions),\n          selectedDelimiter: delimiter\n        };\n        const csvFile = new File([csvString], 'btm.csv', {\n          type: 'text/csv'\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, options);\n        return {\n          result: converterResult.result,\n          properties: converterResult.properties,\n          prettyJson: converterResult.result,\n          via: 'btm',\n          parametersData: [],\n          headerData: [] // Standart dönüşümde boş\n\n        };\n      } catch (_btmErr) {\n        // 2) BTM başarısızsa local XML converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) {\n          throw new Error('XML dönüştürücü bulunamadı (local).');\n        }\n\n        const localResult = yield converter.convert(file, {// UI'dan parametre gelirse burada forward edebilirsin\n        });\n        return {\n          result: localResult.result,\n          properties: localResult.properties,\n          prettyJson: localResult.result,\n          via: 'local',\n          parametersData: [],\n          headerData: []\n        };\n      }\n    })();\n  } // --------- Helpers ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const d of delimiters) {\n      counts[d] = 0;\n\n      for (const line of lines) {\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') inQuotes = !inQuotes;else if (line[i] === d && !inQuotes) counts[d]++;\n        }\n      }\n    }\n\n    let best = ',',\n        max = 0;\n\n    for (const [d, c] of Object.entries(counts)) {\n      if (c > max) {\n        max = c;\n        best = d;\n      }\n    }\n\n    return best;\n  }\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\n\n\n  transformBtmCsv(csv) {\n    const rows = this.parseTypeKeyValueCsv(csv);\n    console.log('Parsed rows:', rows.length);\n\n    if (rows.length === 0) {\n      return {\n        processedData: [],\n        parametersData: [],\n        headerData: [],\n        rawRows: []\n      };\n    } // Örnek satırları logla\n\n\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\n    console.log('Sample rows:', JSON.stringify(sampleRows)); // Parameters ve Header kayıtlarını topla\n\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\n    const headerData = this.extractKeyValue(rows, 'Header');\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length); // JavaScript objelerine dönüştür (gerekirse)\n\n    const _paramObj = this.toObject(parametersData);\n\n    const _headerObj = this.toObject(headerData); // IbanHesap ve Details gruplarını ayır\n\n\n    let ibanGroups = this.groupByTypeAsObjects(rows, 'IbanHesap');\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length); // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\n\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\n      const tempIbanGroups = [];\n\n      for (const detGroup of detailGroups) {\n        const finalNo = detGroup['FinalAccountNo'] || detGroup['HesapNo'] || '';\n        const iban = detGroup['DestinationIban'] || detGroup['Iban'] || '';\n\n        if (finalNo || iban) {\n          tempIbanGroups.push({\n            FinalAccountNo: finalNo,\n            DestinationIban: iban,\n            HesapNo: finalNo,\n            Iban: iban\n          });\n        }\n      }\n\n      if (tempIbanGroups.length > 0) {\n        ibanGroups = tempIbanGroups;\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\n      }\n    } // Eğer detailGroups yoksa ama IbanHesap varsa\n\n\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\n      detailGroups = ibanGroups.map(() => ({\n        TotalCount: '',\n        OrderDetails: '',\n        TransferAmount: '',\n        TotalAmount: '',\n        ToplamTutar: '',\n        Toplam: '',\n        RegisterId: '',\n        Sicil: '',\n        SicilNo: '',\n        RegistrationId: ''\n      }));\n    } // UI tablosu için processedData (component ile aynı alanlar)\n\n\n    const processedData = ibanGroups.map((ibanObj, i) => {\n      const det = detailGroups[i] || {}; // Parameters ve Header'dan da veri almaya çalış\n\n      const paramObj = this.toObject(parametersData);\n      const headerObj = this.toObject(headerData);\n      return {\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || ibanObj['HedefIban'] || '',\n        FinalAccountNo: ibanObj['FinalAccountNo'] || ibanObj['HesapNo'] || ibanObj['SonHesapNo'] || '',\n        TotalCount: det['TotalCount'] || det['ToplamSayı'] || det['Toplam_Sayı'] || det['Count'] || paramObj['TotalCount'] || headerObj['TotalCount'] || '',\n        OrderDetails: det['OrderDetails'] || det['Detail'] || det['Detay'] || det['Sipariş_Detayı'] || det['OrderDetail'] || '',\n        TransferAmount: det['TransferAmount'] || det['Miktar'] || det['Transfer_Miktarı'] || det['Tutar'] || det['Amount'] || '',\n        TotalAmount: det['TotalAmount'] || det['ToplamTutar'] || det['Toplam'] || det['Toplam_Tutar'] || det['Total_Amount'] || det['GenelToplam'] || paramObj['TotalAmount'] || headerObj['TotalAmount'] || '',\n        RegisterId: det['RegisterId'] || det['Sicil'] || det['SicilNo'] || det['RegistrationId'] || det['Sicil_No'] || det['Register_Id'] || det['KayıtId'] || paramObj['RegisterId'] || headerObj['RegisterId'] || paramObj['Sicil'] || headerObj['Sicil'] || ''\n      };\n    });\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\n    return {\n      processedData,\n      parametersData,\n      headerData,\n      rawRows: rows\n    };\n  } // Eksik metod implementasyonları\n\n\n  parseTypeKeyValueCsv(csv) {\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\n    const lines = csv.trim().split(/\\r?\\n/);\n    const rows = [];\n\n    for (const line of lines) {\n      if (line.trim()) {\n        // CSV parsing - virgül ile ayrılmış ve tırnak işaretlerini handle et\n        const parts = this.parseCSVLine(line);\n\n        if (parts.length >= 3) {\n          const type = parts[0].trim();\n          const key = parts[1].trim();\n          const value = parts.slice(2).join(',').trim(); // Eğer value'da virgül varsa birleştir\n\n          rows.push({\n            type: type,\n            key: key,\n            value: value\n          });\n        } else if (parts.length === 2) {\n          // Bazen tip,key formatında olabilir\n          rows.push({\n            type: parts[0].trim(),\n            key: parts[1].trim(),\n            value: ''\n          });\n        }\n      }\n    }\n\n    console.log('Parsed CSV rows sample:', rows.slice(0, 10));\n    return rows;\n  } // CSV satırını doğru şekilde parse et (tırnak işaretlerini de handle et)\n\n\n  parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n\n      if (char === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          // Escaped quote\n          current += '\"';\n          i += 2;\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === ',' && !inQuotes) {\n        result.push(current);\n        current = '';\n        i++;\n      } else {\n        current += char;\n        i++;\n      }\n    }\n\n    result.push(current); // Son field'ı ekle\n\n    return result.map(field => field.replace(/^\"|\"$/g, '')); // Başında ve sonundaki tırnakları kaldır\n  }\n\n  extractKeyValue(rows, type) {\n    return rows.filter(row => row.type === type).map(row => ({\n      key: row.key || '',\n      value: row.value || ''\n    }));\n  }\n\n  toObject(keyValuePairs) {\n    const result = {};\n\n    for (const pair of keyValuePairs) {\n      result[pair.key] = pair.value;\n    }\n\n    return result;\n  }\n\n  groupByTypeAsObjects(rows, type) {\n    const filteredRows = rows.filter(row => row.type === type);\n    const groups = [];\n\n    if (filteredRows.length === 0) {\n      return groups;\n    } // Her unique key için bir grup oluştur ya da sequential olarak grupla\n\n\n    if (type === 'Details') {\n      // Details için her satırı ayrı grup olarak ele al veya ID'ye göre grupla\n      let currentGroup = {};\n\n      for (const row of filteredRows) {\n        if (row.key && row.value !== undefined) {\n          currentGroup[row.key] = row.value; // RegisterId, TotalAmount gibi son alanlar geldiğinde grubu kapat\n\n          if (row.key.toLowerCase().includes('registerid') || row.key.toLowerCase().includes('sicil') || row.key.toLowerCase().includes('totalamount') || row.key.toLowerCase().includes('toplam')) {\n            groups.push({ ...currentGroup\n            });\n            currentGroup = {};\n          }\n        }\n      } // Son grubu da ekle\n\n\n      if (Object.keys(currentGroup).length > 0) {\n        groups.push(currentGroup);\n      }\n    } else {\n      // IbanHesap ve diğer tipler için mevcut logic\n      let currentGroup = {};\n\n      for (const row of filteredRows) {\n        if (row.key && row.value !== undefined) {\n          currentGroup[row.key] = row.value;\n        } // Grup tamamlandığında yeni grup başlat\n\n\n        if (Object.keys(currentGroup).length >= 2) {\n          // IBAN ve HesapNo için minimum 2 alan\n          groups.push({ ...currentGroup\n          });\n          currentGroup = {};\n        }\n      } // Son grubu ekle\n\n\n      if (Object.keys(currentGroup).length > 0) {\n        groups.push(currentGroup);\n      }\n    }\n\n    return groups;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","firstValueFrom","timeout","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","slice","btmResult","transformBtmCsv","processedData","length","properties","parametersData","forEach","p","includes","key","push","headerData","h","resultRows","map","row","fullRow","value","Object","entries","param","header","result","prettyJson","via","delimiter","detectDelimiter","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","options","csvFile","File","type","converterResult","convert","_btmErr","converter","getConverter","Error","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","lines","trim","split","delimiters","counts","d","line","inQuotes","i","best","max","c","csv","rows","parseTypeKeyValueCsv","rawRows","sampleRows","Math","min","JSON","stringify","extractKeyValue","_paramObj","toObject","_headerObj","ibanGroups","groupByTypeAsObjects","detailGroups","tempIbanGroups","detGroup","finalNo","iban","FinalAccountNo","DestinationIban","HesapNo","Iban","TotalCount","OrderDetails","TransferAmount","TotalAmount","ToplamTutar","Toplam","RegisterId","Sicil","SicilNo","RegistrationId","ibanObj","det","paramObj","headerObj","parts","parseCSVLine","join","current","char","field","replace","filter","keyValuePairs","pair","filteredRows","groups","currentGroup","undefined","toLowerCase","keys","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\JsonConverter-Btm\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\r\n\r\nexport interface OrchestratedResult {\r\n  result: any[];\r\n  properties?: string[];\r\n  prettyJson?: any;\r\n  via: string;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n}\r\n\r\nexport interface BtmTransformResult {\r\n  processedData: Array<Record<string, string>>;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n  rawRows: any[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n  constructor(\r\n    private xmlBtm: XmlBtmService,\r\n    private fileConverter: FileConverterService,\r\n    private csvFileConverter: CsvFileConverterService\r\n  ) {}\r\n\r\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\r\n  async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n    const xmlText = await this.readFileAsText(file);\r\n\r\n    // 1) BTM'yi dene (ör. 2 sn timeout)\r\n    try {\r\n      const csvString: string = await firstValueFrom(\r\n        this.xmlBtm.uploadXml(xmlText).pipe(\r\n          timeout(2000),\r\n          catchError(err => throwError(() => err))\r\n        )\r\n      );\r\n\r\n      console.log('BTM CSV:', csvString.slice(0, 200) + '...');\r\n\r\n      // BTM çıktısını doğrudan kendi işleyicimizle dönüştür\r\n      const btmResult = this.transformBtmCsv(csvString);\r\n\r\n      // Eğer dönüşüm başarılıysa, dönüştürülmüş sonucu döndür\r\n      if (btmResult.processedData.length > 0) {\r\n        console.log('BTM dönüşümü başarılı:', btmResult.processedData.length, 'kayıt');\r\n\r\n        // Flat tablo için gerekli property listesi\r\n        const properties = [\r\n          'DestinationIban', 'FinalAccountNo', 'TotalCount', 'OrderDetails',\r\n          'TransferAmount', 'TotalAmount', 'RegisterId'\r\n        ];\r\n\r\n        // Parametre ve Header kayıtlarını da ekle\r\n        btmResult.parametersData.forEach((p: { key: string; value: string }) => {\r\n          if (!properties.includes(p.key)) {\r\n            properties.push(p.key);\r\n          }\r\n        });\r\n\r\n        btmResult.headerData.forEach((h: { key: string; value: string }) => {\r\n          if (!properties.includes(h.key)) {\r\n            properties.push(h.key);\r\n          }\r\n        });\r\n\r\n        // Flat tablo sonucu oluştur\r\n        const resultRows = btmResult.processedData.map((row: Record<string, string>) => {\r\n          const fullRow: Record<string, string> = {};\r\n\r\n          // Processed data alanlarını ekle\r\n          for (const [key, value] of Object.entries(row)) {\r\n            fullRow[key] = value || '-';\r\n          }\r\n\r\n          // Parameters alanlarını ekle\r\n          for (const param of btmResult.parametersData) {\r\n            if (!(param.key in fullRow)) {\r\n              fullRow[param.key] = param.value || '-';\r\n            }\r\n          }\r\n\r\n          // Header alanlarını ekle\r\n          for (const header of btmResult.headerData) {\r\n            if (!(header.key in fullRow)) {\r\n              fullRow[header.key] = header.value || '-';\r\n            }\r\n          }\r\n\r\n          return fullRow;\r\n        });\r\n\r\n        return {\r\n          result: resultRows,\r\n          properties,\r\n          prettyJson: btmResult, // BTM sonucunun tamamını prettyJson olarak kaydet\r\n          via: 'btm',\r\n          parametersData: btmResult.parametersData,\r\n          headerData: btmResult.headerData\r\n        };\r\n      }\r\n\r\n      // Kendi dönüşümümüz başarısız olursa, eskisini deneyelim\r\n      console.log('BTM kendi dönüşümü başarısız, standart dönüşüme geçiliyor');\r\n\r\n      // CSV'yi HİÇ İŞLEMEDEN CSV converter'a ver\r\n      const delimiter = this.detectDelimiter(csvString);\r\n      const defaultOptions: CsvOptions = {\r\n        hasHeader: false,                 // BTM çıktısı çoğu zaman header'sız geliyor\r\n        skipEmptyLines: true,\r\n        selectedDelimiter: delimiter,\r\n        doubleQuoteWrap: false,\r\n        selectedRowDelimiter: 'newline',\r\n        rowPrefix: '',\r\n        rowSuffix: '',\r\n        selectedEncoding: 'utf-8',\r\n        selectedQuoteOption: 'none',\r\n        trimWhitespace: true,\r\n      };\r\n  const options: CsvOptions = { ...(csvOptions ?? defaultOptions), selectedDelimiter: delimiter };\r\n  const csvFile = new File([csvString], 'btm.csv', { type: 'text/csv' });\r\n  const converterResult = await this.csvFileConverter.convert(csvFile, options);\r\n\r\n      return {\r\n        result: converterResult.result,\r\n        properties: converterResult.properties,\r\n        prettyJson: converterResult.result,\r\n        via: 'btm',\r\n        parametersData: [], // Standart dönüşümde boş\r\n        headerData: []      // Standart dönüşümde boş\r\n      };\r\n    } catch (_btmErr) {\r\n      // 2) BTM başarısızsa local XML converter'a düş\r\n      const converter = this.fileConverter.getConverter('xml');\r\n      if (!converter) {\r\n        throw new Error('XML dönüştürücü bulunamadı (local).');\r\n      }\r\n\r\n      const localResult = await converter.convert(file, {\r\n        // UI'dan parametre gelirse burada forward edebilirsin\r\n      });\r\n\r\n      return {\r\n        result: localResult.result,\r\n        properties: localResult.properties,\r\n        prettyJson: localResult.result,\r\n        via: 'local',\r\n        parametersData: [],\r\n        headerData: []\r\n      };\r\n    }\r\n  }\r\n\r\n  // --------- Helpers ---------\r\n\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\r\n  private detectDelimiter(csvString: string): string {\r\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\r\n    const delimiters = [',', ';', '\\t', '|'];\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const d of delimiters) {\r\n      counts[d] = 0;\r\n      for (const line of lines) {\r\n        let inQuotes = false;\r\n        for (let i = 0; i < line.length; i++) {\r\n          if (line[i] === '\"') inQuotes = !inQuotes;\r\n          else if (line[i] === d && !inQuotes) counts[d]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let best = ',', max = 0;\r\n    for (const [d, c] of Object.entries(counts)) {\r\n      if (c > max) { max = c; best = d; }\r\n    }\r\n    return best;\r\n  }\r\n\r\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\r\n  private transformBtmCsv(csv: string): BtmTransformResult {\r\n    const rows = this.parseTypeKeyValueCsv(csv);\r\n\r\n    console.log('Parsed rows:', rows.length);\r\n    if (rows.length === 0) {\r\n      return {\r\n        processedData: [],\r\n        parametersData: [],\r\n        headerData: [],\r\n        rawRows: []\r\n      };\r\n    }\r\n\r\n    // Örnek satırları logla\r\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\r\n    console.log('Sample rows:', JSON.stringify(sampleRows));\r\n\r\n    // Parameters ve Header kayıtlarını topla\r\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\r\n    const headerData     = this.extractKeyValue(rows, 'Header');\r\n\r\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length);\r\n\r\n    // JavaScript objelerine dönüştür (gerekirse)\r\n    const _paramObj = this.toObject(parametersData);\r\n    const _headerObj = this.toObject(headerData);\r\n\r\n    // IbanHesap ve Details gruplarını ayır\r\n    let ibanGroups   = this.groupByTypeAsObjects(rows, 'IbanHesap');\r\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\r\n\r\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length);\r\n\r\n    // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\r\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\r\n      const tempIbanGroups: Array<Record<string, string>> = [];\r\n      for (const detGroup of detailGroups) {\r\n        const finalNo = detGroup['FinalAccountNo'] || detGroup['HesapNo'] || '';\r\n        const iban    = detGroup['DestinationIban'] || detGroup['Iban'] || '';\r\n        if (finalNo || iban) {\r\n          tempIbanGroups.push({\r\n            FinalAccountNo: finalNo,\r\n            DestinationIban: iban,\r\n            HesapNo: finalNo,\r\n            Iban: iban\r\n          });\r\n        }\r\n      }\r\n\r\n      if (tempIbanGroups.length > 0) {\r\n        ibanGroups = tempIbanGroups;\r\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\r\n      }\r\n    }\r\n\r\n    // Eğer detailGroups yoksa ama IbanHesap varsa\r\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\r\n      detailGroups = ibanGroups.map(() => ({\r\n        TotalCount: '',\r\n        OrderDetails: '',\r\n        TransferAmount: '',\r\n        TotalAmount: '',\r\n        ToplamTutar: '',\r\n        Toplam: '',\r\n        RegisterId: '',\r\n        Sicil: '',\r\n        SicilNo: '',\r\n        RegistrationId: ''\r\n      }));\r\n    }\r\n\r\n    // UI tablosu için processedData (component ile aynı alanlar)\r\n    const processedData = ibanGroups.map((ibanObj: Record<string, string>, i: number) => {\r\n      const det = detailGroups[i] || {};\r\n      \r\n      // Parameters ve Header'dan da veri almaya çalış\r\n      const paramObj = this.toObject(parametersData);\r\n      const headerObj = this.toObject(headerData);\r\n      \r\n      return {\r\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || ibanObj['HedefIban'] || '',\r\n        FinalAccountNo:  ibanObj['FinalAccountNo']  || ibanObj['HesapNo'] || ibanObj['SonHesapNo'] || '',\r\n        TotalCount:      det['TotalCount'] || det['ToplamSayı'] || det['Toplam_Sayı'] || det['Count'] || paramObj['TotalCount'] || headerObj['TotalCount'] || '',\r\n        OrderDetails:    det['OrderDetails'] || det['Detail'] || det['Detay'] || det['Sipariş_Detayı'] || det['OrderDetail'] || '',\r\n        TransferAmount:  det['TransferAmount'] || det['Miktar'] || det['Transfer_Miktarı'] || det['Tutar'] || det['Amount'] || '',\r\n        TotalAmount:     det['TotalAmount'] || det['ToplamTutar'] || det['Toplam'] || det['Toplam_Tutar'] || det['Total_Amount'] || det['GenelToplam'] || paramObj['TotalAmount'] || headerObj['TotalAmount'] || '',\r\n        RegisterId:      det['RegisterId'] || det['Sicil'] || det['SicilNo'] || det['RegistrationId'] || det['Sicil_No'] || det['Register_Id'] || det['KayıtId'] || paramObj['RegisterId'] || headerObj['RegisterId'] || paramObj['Sicil'] || headerObj['Sicil'] || ''\r\n      };\r\n    });\r\n\r\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\r\n    return {\r\n      processedData,\r\n      parametersData,\r\n      headerData,\r\n      rawRows: rows\r\n    };\r\n  }\r\n\r\n  // Eksik metod implementasyonları\r\n  private parseTypeKeyValueCsv(csv: string): any[] {\r\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\r\n    const lines = csv.trim().split(/\\r?\\n/);\r\n    const rows: any[] = [];\r\n    \r\n    for (const line of lines) {\r\n      if (line.trim()) {\r\n        // CSV parsing - virgül ile ayrılmış ve tırnak işaretlerini handle et\r\n        const parts = this.parseCSVLine(line);\r\n        if (parts.length >= 3) {\r\n          const type = parts[0].trim();\r\n          const key = parts[1].trim();\r\n          const value = parts.slice(2).join(',').trim(); // Eğer value'da virgül varsa birleştir\r\n          \r\n          rows.push({\r\n            type: type,\r\n            key: key,\r\n            value: value\r\n          });\r\n        } else if (parts.length === 2) {\r\n          // Bazen tip,key formatında olabilir\r\n          rows.push({\r\n            type: parts[0].trim(),\r\n            key: parts[1].trim(),\r\n            value: ''\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log('Parsed CSV rows sample:', rows.slice(0, 10));\r\n    return rows;\r\n  }\r\n\r\n  // CSV satırını doğru şekilde parse et (tırnak işaretlerini de handle et)\r\n  private parseCSVLine(line: string): string[] {\r\n    const result: string[] = [];\r\n    let current = '';\r\n    let inQuotes = false;\r\n    let i = 0;\r\n    \r\n    while (i < line.length) {\r\n      const char = line[i];\r\n      \r\n      if (char === '\"') {\r\n        if (inQuotes && line[i + 1] === '\"') {\r\n          // Escaped quote\r\n          current += '\"';\r\n          i += 2;\r\n        } else {\r\n          // Toggle quote state\r\n          inQuotes = !inQuotes;\r\n          i++;\r\n        }\r\n      } else if (char === ',' && !inQuotes) {\r\n        result.push(current);\r\n        current = '';\r\n        i++;\r\n      } else {\r\n        current += char;\r\n        i++;\r\n      }\r\n    }\r\n    \r\n    result.push(current); // Son field'ı ekle\r\n    return result.map(field => field.replace(/^\"|\"$/g, '')); // Başında ve sonundaki tırnakları kaldır\r\n  }\r\n\r\n  private extractKeyValue(rows: any[], type: string): Array<{ key: string; value: string }> {\r\n    return rows\r\n      .filter((row: any) => row.type === type)\r\n      .map((row: any) => ({\r\n        key: row.key || '',\r\n        value: row.value || ''\r\n      }));\r\n  }\r\n\r\n  private toObject(keyValuePairs: Array<{ key: string; value: string }>): Record<string, string> {\r\n    const result: Record<string, string> = {};\r\n    for (const pair of keyValuePairs) {\r\n      result[pair.key] = pair.value;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private groupByTypeAsObjects(rows: any[], type: string): Array<Record<string, string>> {\r\n    const filteredRows = rows.filter((row: any) => row.type === type);\r\n    const groups: Array<Record<string, string>> = [];\r\n    \r\n    if (filteredRows.length === 0) {\r\n      return groups;\r\n    }\r\n\r\n    // Her unique key için bir grup oluştur ya da sequential olarak grupla\r\n    if (type === 'Details') {\r\n      // Details için her satırı ayrı grup olarak ele al veya ID'ye göre grupla\r\n      let currentGroup: Record<string, string> = {};\r\n      \r\n      for (const row of filteredRows) {\r\n        if (row.key && row.value !== undefined) {\r\n          currentGroup[row.key] = row.value;\r\n          \r\n          // RegisterId, TotalAmount gibi son alanlar geldiğinde grubu kapat\r\n          if (row.key.toLowerCase().includes('registerid') || \r\n              row.key.toLowerCase().includes('sicil') ||\r\n              row.key.toLowerCase().includes('totalamount') ||\r\n              row.key.toLowerCase().includes('toplam')) {\r\n            groups.push({ ...currentGroup });\r\n            currentGroup = {};\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Son grubu da ekle\r\n      if (Object.keys(currentGroup).length > 0) {\r\n        groups.push(currentGroup);\r\n      }\r\n    } else {\r\n      // IbanHesap ve diğer tipler için mevcut logic\r\n      let currentGroup: Record<string, string> = {};\r\n      \r\n      for (const row of filteredRows) {\r\n        if (row.key && row.value !== undefined) {\r\n          currentGroup[row.key] = row.value;\r\n        }\r\n        \r\n        // Grup tamamlandığında yeni grup başlat\r\n        if (Object.keys(currentGroup).length >= 2) { // IBAN ve HesapNo için minimum 2 alan\r\n          groups.push({ ...currentGroup });\r\n          currentGroup = {};\r\n        }\r\n      }\r\n      \r\n      // Son grubu ekle\r\n      if (Object.keys(currentGroup).length > 0) {\r\n        groups.push(currentGroup);\r\n      }\r\n    }\r\n    \r\n    return groups;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}