{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV çıktısı:', csvString); // Only detect delimiter for options\n\n        const delimiter = _this.detectDelimiter(csvString); // Always use CSV converter service for consistency\n\n\n        const defaultOptions = {\n          hasHeader: false,\n          skipEmptyLines: true,\n          selectedDelimiter: delimiter,\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        }; // UI'dan gelen options ile merge et, ama delimiteri detect edilenle override et\n\n        const options = csvOptions ? { ...csvOptions,\n          selectedDelimiter: delimiter,\n          hasHeader: false\n        } : defaultOptions; // CSV servisi ile dönüşüm\n\n        const csvFile = new File([csvString], 'btm.csv', {\n          type: 'text/csv'\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, options);\n        console.log('CSV converter returned:', converterResult); // Type/Key/Value format için özel dönüşüm - tüm muhtemel varyasyonlar için\n\n        const records = converterResult.result || []; // 1) İlk birkaç satıra bakarak Type/Key/Value formatı mı algıla\n\n        let isTypeKeyValue = false;\n        let typeField = '';\n        let keyField = '';\n        let valueField = ''; // Farklı format olasılıkları\n\n        const possibleFormats = [{\n          type: 'column1',\n          key: 'column2',\n          value: 'column3'\n        }, {\n          type: 'Type',\n          key: 'Key',\n          value: 'Value'\n        }, {\n          type: 'type',\n          key: 'key',\n          value: 'value'\n        }, {\n          type: '0',\n          key: '1',\n          value: '2'\n        } // header: false -> indeks bazlı\n        ];\n\n        for (const format of possibleFormats) {\n          // Bu format için gereken alanlar var mı?\n          const hasTypeField = records.length > 0 && records[0][format.type] !== undefined;\n          const hasKeyField = records.length > 0 && records[0][format.key] !== undefined;\n          const hasValueField = records.length > 0 && records[0][format.value] !== undefined;\n\n          if (hasTypeField && hasKeyField && hasValueField) {\n            // İlk birkaç satırda \"Parameters\", \"Header\" gibi tip değerleri var mı?\n            const typeValues = new Set(['Parameters', 'Header', 'Details']);\n            const sampleRows = records.slice(0, Math.min(5, records.length));\n            const matchingTypes = sampleRows.filter(r => typeValues.has(r[format.type]));\n\n            if (matchingTypes.length > 0) {\n              isTypeKeyValue = true;\n              typeField = format.type;\n              keyField = format.key;\n              valueField = format.value;\n              break;\n            }\n          }\n        } // Type/Key/Value format algılandıysa, flat objeye dönüştür\n\n\n        if (isTypeKeyValue) {\n          const flatObject = {};\n\n          for (const row of records) {\n            const type = row[typeField];\n            const key = row[keyField];\n            const value = row[valueField];\n\n            if (type && key) {\n              flatObject[key] = value || '';\n            }\n          }\n\n          if (Object.keys(flatObject).length > 0) {\n            const rowsObjects = [flatObject];\n            const properties = Object.keys(flatObject);\n            console.log('BTM Type/Key/Value formatı algılandı. Flat objeye dönüştürüldü:', flatObject);\n            return {\n              result: rowsObjects,\n              properties,\n              prettyJson: rowsObjects,\n              via: 'btm'\n            };\n          }\n        } // Normal CSV\n\n\n        return { ...converterResult,\n          prettyJson: converterResult.result,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  } // Bu fonksiyonlar artık kullanılmadığı için kaldırıldı - CSV dönüşüm işlemleri CsvConverter servisine devredildi\n\n  /**\r\n   * Otomatik delimiter tespiti\r\n   */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5); // İlk 5 satırı kontrol et\n\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const delimiter of delimiters) {\n      counts[delimiter] = 0;\n\n      for (const line of lines) {\n        // Quotes içindeki delimiter'ları sayma\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') {\n            inQuotes = !inQuotes;\n          } else if (line[i] === delimiter && !inQuotes) {\n            counts[delimiter]++;\n          }\n        }\n      }\n    } // En çok bulunan delimiter'ı döndür\n\n\n    let maxCount = 0;\n    let bestDelimiter = ',';\n\n    for (const [delimiter, count] of Object.entries(counts)) {\n      if (count > maxCount) {\n        maxCount = count;\n        bestDelimiter = delimiter;\n      }\n    }\n\n    console.log('Delimiter tespiti:', counts, 'Seçilen:', bestDelimiter);\n    return bestDelimiter;\n  }\n  /**\r\n   * BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n   * Bu fonksiyon CSV dönüşüm sonucunda Type/Key/Value kolonları varsa kullanılır.\r\n   * Normal CSV dönüşümü için gereksizdir.\r\n   */\n\n\n  transformBtmJson(typedRows) {\n    // Tüm Key/Value çiftlerini tek bir objeye topla\n    const result = {};\n\n    for (const row of typedRows || []) {\n      const {\n        Key,\n        Value\n      } = row || {}; // Her Key/Value çiftini direkt objeye ekle\n\n      if (Key && Value !== undefined) {\n        result[Key] = Value;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","delimiter","detectDelimiter","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","options","csvFile","File","type","converterResult","convert","records","result","isTypeKeyValue","typeField","keyField","valueField","possibleFormats","key","value","format","hasTypeField","length","undefined","hasKeyField","hasValueField","typeValues","Set","sampleRows","slice","Math","min","matchingTypes","filter","r","has","flatObject","row","Object","keys","rowsObjects","properties","prettyJson","via","_btmErr","converter","getConverter","Error","localResult","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","lines","trim","split","delimiters","counts","line","inQuotes","i","maxCount","bestDelimiter","count","entries","transformBtmJson","typedRows","Key","Value","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n            \r\n            console.log('BTM CSV çıktısı:', csvString);\r\n\r\n            // Only detect delimiter for options\r\n            const delimiter = this.detectDelimiter(csvString);\r\n            \r\n            // Always use CSV converter service for consistency\r\n            const defaultOptions: CsvOptions = {\r\n                hasHeader: false,  // BTM Type/Key/Value kolonlar için header false\r\n                skipEmptyLines: true,\r\n                selectedDelimiter: delimiter,\r\n                doubleQuoteWrap: false,\r\n                selectedRowDelimiter: 'newline',\r\n                rowPrefix: '',\r\n                rowSuffix: '',\r\n                selectedEncoding: 'utf-8',\r\n                selectedQuoteOption: 'none',\r\n                trimWhitespace: true,\r\n            };\r\n\r\n            // UI'dan gelen options ile merge et, ama delimiteri detect edilenle override et\r\n            const options = csvOptions\r\n                ? { ...csvOptions, selectedDelimiter: delimiter, hasHeader: false }\r\n                : defaultOptions;\r\n\r\n            // CSV servisi ile dönüşüm\r\n            const csvFile = new File([csvString], 'btm.csv', { type: 'text/csv' });\r\n            const converterResult = await this.csvFileConverter.convert(csvFile, options);\r\n            console.log('CSV converter returned:', converterResult);\r\n            \r\n            // Type/Key/Value format için özel dönüşüm - tüm muhtemel varyasyonlar için\r\n            const records: Array<Record<string, any>> = converterResult.result || [];\r\n            \r\n            // 1) İlk birkaç satıra bakarak Type/Key/Value formatı mı algıla\r\n            let isTypeKeyValue = false;\r\n            let typeField = '';\r\n            let keyField = '';\r\n            let valueField = '';\r\n            \r\n            // Farklı format olasılıkları\r\n            const possibleFormats = [\r\n                { type: 'column1', key: 'column2', value: 'column3' }, // header: false -> column1,2,3...\r\n                { type: 'Type', key: 'Key', value: 'Value' },          // header: true -> Type,Key,Value\r\n                { type: 'type', key: 'key', value: 'value' },          // header: true -> type,key,value\r\n                { type: '0', key: '1', value: '2' }                    // header: false -> indeks bazlı\r\n            ];\r\n            \r\n            for (const format of possibleFormats) {\r\n                // Bu format için gereken alanlar var mı?\r\n                const hasTypeField = records.length > 0 && records[0][format.type] !== undefined;\r\n                const hasKeyField = records.length > 0 && records[0][format.key] !== undefined;\r\n                const hasValueField = records.length > 0 && records[0][format.value] !== undefined;\r\n                \r\n                if (hasTypeField && hasKeyField && hasValueField) {\r\n                    // İlk birkaç satırda \"Parameters\", \"Header\" gibi tip değerleri var mı?\r\n                    const typeValues = new Set(['Parameters', 'Header', 'Details']);\r\n                    const sampleRows = records.slice(0, Math.min(5, records.length));\r\n                    const matchingTypes = sampleRows.filter((r: Record<string, any>) => typeValues.has(r[format.type]));\r\n                    \r\n                    if (matchingTypes.length > 0) {\r\n                        isTypeKeyValue = true;\r\n                        typeField = format.type;\r\n                        keyField = format.key;\r\n                        valueField = format.value;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Type/Key/Value format algılandıysa, flat objeye dönüştür\r\n            if (isTypeKeyValue) {\r\n                const flatObject: Record<string, string> = {};\r\n                \r\n                for (const row of records) {\r\n                    const type = row[typeField];\r\n                    const key = row[keyField];\r\n                    const value = row[valueField];\r\n                    \r\n                    if (type && key) {\r\n                        flatObject[key] = value || '';\r\n                    }\r\n                }\r\n                \r\n                if (Object.keys(flatObject).length > 0) {\r\n                    const rowsObjects = [flatObject];\r\n                    const properties = Object.keys(flatObject);\r\n                    \r\n                    console.log('BTM Type/Key/Value formatı algılandı. Flat objeye dönüştürüldü:', \r\n                                 flatObject);\r\n                    \r\n                    return {\r\n                        result: rowsObjects,\r\n                        properties,\r\n                        prettyJson: rowsObjects,\r\n                        via: 'btm',\r\n                    };\r\n                }\r\n            }\r\n\r\n            // Normal CSV\r\n            return {\r\n                ...converterResult,\r\n                prettyJson: converterResult.result,\r\n                via: 'btm',\r\n            };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    // Bu fonksiyonlar artık kullanılmadığı için kaldırıldı - CSV dönüşüm işlemleri CsvConverter servisine devredildi\r\n\r\n    /**\r\n     * Otomatik delimiter tespiti\r\n     */\r\n    private detectDelimiter(csvString: string): string {\r\n        const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5); // İlk 5 satırı kontrol et\r\n        const delimiters = [',', ';', '\\t', '|'];\r\n        const counts: { [key: string]: number } = {};\r\n\r\n        for (const delimiter of delimiters) {\r\n            counts[delimiter] = 0;\r\n            for (const line of lines) {\r\n                // Quotes içindeki delimiter'ları sayma\r\n                let inQuotes = false;\r\n                for (let i = 0; i < line.length; i++) {\r\n                    if (line[i] === '\"') {\r\n                        inQuotes = !inQuotes;\r\n                    } else if (line[i] === delimiter && !inQuotes) {\r\n                        counts[delimiter]++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // En çok bulunan delimiter'ı döndür\r\n        let maxCount = 0;\r\n        let bestDelimiter = ',';\r\n        for (const [delimiter, count] of Object.entries(counts)) {\r\n            if (count > maxCount) {\r\n                maxCount = count;\r\n                bestDelimiter = delimiter;\r\n            }\r\n        }\r\n\r\n        console.log('Delimiter tespiti:', counts, 'Seçilen:', bestDelimiter);\r\n        return bestDelimiter;\r\n    }\r\n\r\n    /**\r\n     * BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n     * Bu fonksiyon CSV dönüşüm sonucunda Type/Key/Value kolonları varsa kullanılır.\r\n     * Normal CSV dönüşümü için gereksizdir.\r\n     */\r\n    private transformBtmJson(typedRows: Array<{ Type?: string; Key?: string; Value?: string }>) {\r\n        // Tüm Key/Value çiftlerini tek bir objeye topla\r\n        const result: Record<string, string> = {};\r\n        \r\n        for (const row of typedRows || []) {\r\n            const { Key, Value } = row || {};\r\n            // Her Key/Value çiftini direkt objeye ekle\r\n            if (Key && Value !== undefined) {\r\n                result[Key] = Value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}