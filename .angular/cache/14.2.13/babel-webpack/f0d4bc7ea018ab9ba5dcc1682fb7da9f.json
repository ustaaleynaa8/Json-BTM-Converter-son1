{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/JsonConverter-Btm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\n\n\n  processXml(file, csvOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file);\n      console.log('XML içeriği:', xmlText.slice(0, 200) + '...'); // XML içeriğini logla (ilk 200 karakter)\n      // 1) BTM'yi dene (ör. 2 sn timeout)\n\n      try {\n        console.log(\"BTM'ye gönderilen XML:\", xmlText.slice(0, 200) + '...');\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => {\n          console.error(\"BTM hatası:\", err.message, err.stack); // BTM hatası logla\n\n          return throwError(() => err);\n        })));\n        console.log(\"BTM'den dönen CSV:\", csvString.slice(0, 200) + '...'); // CSV başı logla\n        // BTM çıktısını dönüştürme işlemi\n\n        const btmResult = _this.transformBtmCsv(csvString);\n\n        console.log(\"BTM dönüşüm sonucu:\", btmResult.processedData.length, \"kayıt\");\n\n        if (btmResult.processedData.length > 0) {\n          console.log(\"BTM dönüşümü başarılı:\", btmResult.processedData.length, \"kayıt\"); // İleri işleme (ör. properties vs.)\n\n          return {\n            result: btmResult.processedData,\n            properties: ['DestinationIban', 'FinalAccountNo'],\n            prettyJson: btmResult,\n            via: 'btm',\n            parametersData: btmResult.parametersData,\n            headerData: btmResult.headerData\n          };\n        }\n\n        console.log(\"BTM dönüşüm başarısız, standart dönüşüm başlatılıyor...\"); // CSV'yi işlemek için CsvFileConverterService kullan\n\n        const defaultOptions = {\n          hasHeader: false,\n          skipEmptyLines: true,\n          selectedDelimiter: ',',\n          selectedRowDelimiter: 'newline',\n          selectedEncoding: 'utf-8',\n          trimWhitespace: true,\n          doubleQuoteWrap: false,\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedQuoteOption: 'none' // Bu satırı ekledim\n\n        };\n        const csvFile = new File([csvString], \"btm.csv\", {\n          type: \"text/csv\"\n        });\n        const converterResult = yield _this.csvFileConverter.convert(csvFile, defaultOptions);\n        console.log(\"Standart dönüşüm sonrası\", converterResult.result.length, \"kayıt bulundu\");\n        return {\n          result: converterResult.result,\n          properties: converterResult.properties,\n          prettyJson: converterResult.result,\n          via: 'btm',\n          parametersData: [],\n          headerData: []\n        };\n      } catch (_btmErr) {\n        console.error(\"BTM hatası:\", _btmErr.message, _btmErr.stack); // BTM başarısızsa lokal XML converter'a düş\n\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) {\n          throw new Error(\"XML dönüştürücü bulunamadı (local).\");\n        }\n\n        const localResult = yield converter.convert(file, {\n          // options burada olmalı\n          delimiter: ',',\n          skipEmptyLines: true,\n          selectedEncoding: 'utf-8' // ek seçenekler burada belirtilebilir\n\n        });\n        console.log(\"Lokal dönüşüm başarılı:\", localResult.result.length, \"kayıt bulundu\");\n        return {\n          result: localResult.result,\n          properties: localResult.properties,\n          prettyJson: localResult.result,\n          via: 'local',\n          parametersData: [],\n          headerData: []\n        };\n      }\n    })();\n  } // --------- Helpers ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  }\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\n\n\n  detectDelimiter(csvString) {\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\n    const delimiters = [',', ';', '\\t', '|'];\n    const counts = {};\n\n    for (const d of delimiters) {\n      counts[d] = 0;\n\n      for (const line of lines) {\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n          if (line[i] === '\"') inQuotes = !inQuotes;else if (line[i] === d && !inQuotes) counts[d]++;\n        }\n      }\n    }\n\n    let best = ',',\n        max = 0;\n\n    for (const [d, c] of Object.entries(counts)) {\n      if (c > max) {\n        max = c;\n        best = d;\n      }\n    }\n\n    return best;\n  }\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\n\n\n  transformBtmCsv(csv) {\n    const rows = this.parseTypeKeyValueCsv(csv);\n    console.log('Parsed rows:', rows.length);\n\n    if (rows.length === 0) {\n      return {\n        processedData: [],\n        parametersData: [],\n        headerData: [],\n        rawRows: []\n      };\n    } // Örnek satırları logla\n\n\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\n    console.log('Sample rows:', JSON.stringify(sampleRows)); // Parameters ve Header kayıtlarını topla\n\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\n    const headerData = this.extractKeyValue(rows, 'Header');\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length); // JavaScript objelerine dönüştür (gerekirse)\n\n    const _paramObj = this.toObject(parametersData);\n\n    const _headerObj = this.toObject(headerData); // IbanHesap ve Details gruplarını ayır\n\n\n    let ibanGroups = this.groupByTypeAsObjects(rows, 'IbanHesap');\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length); // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\n\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\n      const tempIbanGroups = [];\n\n      for (const detGroup of detailGroups) {\n        const finalNo = detGroup['FinalAccountNo'] || detGroup['HesapNo'] || '';\n        const iban = detGroup['DestinationIban'] || detGroup['Iban'] || '';\n\n        if (finalNo || iban) {\n          tempIbanGroups.push({\n            FinalAccountNo: finalNo,\n            DestinationIban: iban,\n            HesapNo: finalNo,\n            Iban: iban\n          });\n        }\n      }\n\n      if (tempIbanGroups.length > 0) {\n        ibanGroups = tempIbanGroups;\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\n      }\n    } // Eğer detailGroups yoksa ama IbanHesap varsa\n\n\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\n      detailGroups = ibanGroups.map(() => ({\n        TotalCount: '',\n        OrderDetails: '',\n        TransferAmount: '',\n        TotalAmount: '',\n        ToplamTutar: '',\n        Toplam: '',\n        RegisterId: '',\n        Sicil: '',\n        SicilNo: '',\n        RegistrationId: ''\n      }));\n    } // UI tablosu için processedData (component ile aynı alanlar)\n\n\n    const processedData = ibanGroups.map((ibanObj, i) => {\n      const det = detailGroups[i] || {};\n      return {\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || '',\n        FinalAccountNo: ibanObj['FinalAccountNo'] || ibanObj['HesapNo'] || '',\n        TotalCount: det['TotalCount'] || '',\n        OrderDetails: det['OrderDetails'] || det['Detail'] || '',\n        TransferAmount: det['TransferAmount'] || det['Miktar'] || '',\n        TotalAmount: det['TotalAmount'] || det['ToplamTutar'] || det['Toplam'] || '',\n        RegisterId: det['RegisterId'] || det['Sicil'] || det['SicilNo'] || det['RegistrationId'] || ''\n      };\n    });\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\n    return {\n      processedData,\n      parametersData,\n      headerData,\n      rawRows: rows\n    };\n  } // Eksik metod implementasyonları\n\n\n  parseTypeKeyValueCsv(csv) {\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\n    const lines = csv.trim().split(/\\r?\\n/);\n    const rows = [];\n\n    for (const line of lines) {\n      if (line.trim()) {\n        // Basit CSV parsing - gerçek implementasyonunuza göre ayarlayın\n        const parts = line.split(',').map(part => part.trim().replace(/\"/g, ''));\n\n        if (parts.length >= 3) {\n          rows.push({\n            type: parts[0],\n            key: parts[1],\n            value: parts.slice(2).join(',') // Eğer value'da virgül varsa birleştir\n\n          });\n        }\n      }\n    }\n\n    return rows;\n  }\n\n  extractKeyValue(rows, type) {\n    return rows.filter(row => row.type === type).map(row => ({\n      key: row.key || '',\n      value: row.value || ''\n    }));\n  }\n\n  toObject(keyValuePairs) {\n    const result = {};\n\n    for (const pair of keyValuePairs) {\n      result[pair.key] = pair.value;\n    }\n\n    return result;\n  }\n\n  groupByTypeAsObjects(rows, type) {\n    const filteredRows = rows.filter(row => row.type === type);\n    const groups = []; // Basit gruplama - gerçek implementasyonunuza göre ayarlayın\n\n    let currentGroup = {};\n\n    for (const row of filteredRows) {\n      if (row.key && row.value !== undefined) {\n        currentGroup[row.key] = row.value;\n      } // Grup tamamlandığında yeni grup başlat (örnek logic)\n\n\n      if (Object.keys(currentGroup).length >= 5) {\n        groups.push({ ...currentGroup\n        });\n        currentGroup = {};\n      }\n    } // Son grubu ekle\n\n\n    if (Object.keys(currentGroup).length > 0) {\n      groups.push(currentGroup);\n    }\n\n    return groups;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","firstValueFrom","timeout","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","csvOptions","xmlText","readFileAsText","console","log","slice","csvString","uploadXml","pipe","err","error","message","stack","btmResult","transformBtmCsv","processedData","length","result","properties","prettyJson","via","parametersData","headerData","defaultOptions","hasHeader","skipEmptyLines","selectedDelimiter","selectedRowDelimiter","selectedEncoding","trimWhitespace","doubleQuoteWrap","rowPrefix","rowSuffix","selectedQuoteOption","csvFile","File","type","converterResult","convert","_btmErr","converter","getConverter","Error","localResult","delimiter","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","detectDelimiter","lines","trim","split","delimiters","counts","d","line","inQuotes","i","best","max","c","Object","entries","csv","rows","parseTypeKeyValueCsv","rawRows","sampleRows","Math","min","JSON","stringify","extractKeyValue","_paramObj","toObject","_headerObj","ibanGroups","groupByTypeAsObjects","detailGroups","tempIbanGroups","detGroup","finalNo","iban","push","FinalAccountNo","DestinationIban","HesapNo","Iban","map","TotalCount","OrderDetails","TransferAmount","TotalAmount","ToplamTutar","Toplam","RegisterId","Sicil","SicilNo","RegistrationId","ibanObj","det","parts","part","replace","key","value","join","filter","row","keyValuePairs","pair","filteredRows","groups","currentGroup","undefined","keys","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\JsonConverter-Btm\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { CsvOptions } from './csv-converter.service';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { catchError, throwError, firstValueFrom, timeout } from 'rxjs';\r\n\r\nexport interface OrchestratedResult {\r\n  result: any[];\r\n  properties?: string[];\r\n  prettyJson?: any;\r\n  via: string;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n}\r\n\r\nexport interface BtmTransformResult {\r\n  processedData: Array<Record<string, string>>;\r\n  parametersData: Array<{ key: string; value: string }>;\r\n  headerData: Array<{ key: string; value: string }>;\r\n  rawRows: any[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n  constructor(\r\n    private xmlBtm: XmlBtmService,\r\n    private fileConverter: FileConverterService,\r\n    private csvFileConverter: CsvFileConverterService\r\n  ) {}\r\n\r\n  /**\r\n   * XML dosyasını alır:\r\n   * 1) BTM'yi dener (CSV string alır)\r\n   * 2) CSV'yi doğrudan CsvFileConverterService'e paslar (tüm dönüşüm orada)\r\n   * 3) BTM başarısızsa local XML converter'a düşer\r\n   */\r\n async processXml(file: File, csvOptions?: CsvOptions): Promise<OrchestratedResult> {\r\n  const xmlText = await this.readFileAsText(file);\r\n  console.log('XML içeriği:', xmlText.slice(0, 200) + '...'); // XML içeriğini logla (ilk 200 karakter)\r\n\r\n  // 1) BTM'yi dene (ör. 2 sn timeout)\r\n  try {\r\n    console.log(\"BTM'ye gönderilen XML:\", xmlText.slice(0, 200) + '...');\r\n\r\n    const csvString: string = await firstValueFrom(\r\n      this.xmlBtm.uploadXml(xmlText).pipe(\r\n        timeout(2000),\r\n        catchError(err => {\r\n          console.error(\"BTM hatası:\", err.message, err.stack); // BTM hatası logla\r\n          return throwError(() => err);\r\n        })\r\n      )\r\n    );\r\n\r\n    console.log(\"BTM'den dönen CSV:\", csvString.slice(0, 200) + '...'); // CSV başı logla\r\n\r\n    // BTM çıktısını dönüştürme işlemi\r\n    const btmResult = this.transformBtmCsv(csvString);\r\n    console.log(\"BTM dönüşüm sonucu:\", btmResult.processedData.length, \"kayıt\");\r\n\r\n    if (btmResult.processedData.length > 0) {\r\n      console.log(\"BTM dönüşümü başarılı:\", btmResult.processedData.length, \"kayıt\");\r\n\r\n      // İleri işleme (ör. properties vs.)\r\n      return {\r\n        result: btmResult.processedData,\r\n        properties: ['DestinationIban', 'FinalAccountNo'], // Gerekirse ayarla\r\n        prettyJson: btmResult, // BTM sonucunu burada da logla\r\n        via: 'btm',\r\n        parametersData: btmResult.parametersData,\r\n        headerData: btmResult.headerData\r\n      };\r\n    }\r\n\r\n    console.log(\"BTM dönüşüm başarısız, standart dönüşüm başlatılıyor...\");\r\n    // CSV'yi işlemek için CsvFileConverterService kullan\r\n    const defaultOptions: CsvOptions = {\r\n  hasHeader: false,\r\n  skipEmptyLines: true,\r\n  selectedDelimiter: ',',\r\n  selectedRowDelimiter: 'newline',\r\n  selectedEncoding: 'utf-8',\r\n  trimWhitespace: true,\r\n  doubleQuoteWrap: false,           // Bu satırı ekledim\r\n  rowPrefix: '',                   // Bu satırı ekledim\r\n  rowSuffix: '',                   // Bu satırı ekledim\r\n  selectedQuoteOption: 'none'      // Bu satırı ekledim\r\n};\r\n\r\n\r\n    const csvFile = new File([csvString], \"btm.csv\", { type: \"text/csv\" });\r\n    const converterResult = await this.csvFileConverter.convert(csvFile, defaultOptions);\r\n\r\n    console.log(\"Standart dönüşüm sonrası\", converterResult.result.length, \"kayıt bulundu\");\r\n\r\n    return {\r\n      result: converterResult.result,\r\n      properties: converterResult.properties,\r\n      prettyJson: converterResult.result,\r\n      via: 'btm',\r\n      parametersData: [],\r\n      headerData: []\r\n    };\r\n  } catch (_btmErr: any) { \r\n    console.error(\"BTM hatası:\", _btmErr.message, _btmErr.stack);\r\n    // BTM başarısızsa lokal XML converter'a düş\r\n    const converter = this.fileConverter.getConverter('xml');\r\n    if (!converter) {\r\n      throw new Error(\"XML dönüştürücü bulunamadı (local).\");\r\n    }\r\n\r\n    const localResult = await converter.convert(file, {\r\n  // options burada olmalı\r\n  delimiter: ',',\r\n  skipEmptyLines: true,\r\n  selectedEncoding: 'utf-8',\r\n  // ek seçenekler burada belirtilebilir\r\n});\r\n\r\n    console.log(\"Lokal dönüşüm başarılı:\", localResult.result.length, \"kayıt bulundu\");\r\n\r\n    return {\r\n      result: localResult.result,\r\n      properties: localResult.properties,\r\n      prettyJson: localResult.result,\r\n      via: 'local',\r\n      parametersData: [],\r\n      headerData: []\r\n    };\r\n  }\r\n}\r\n\r\n  // --------- Helpers ---------\r\n\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /** Basit delimiter tespiti (istersen CsvFileConverterService'e de devredebiliriz) */\r\n  private detectDelimiter(csvString: string): string {\r\n    const lines = csvString.trim().split(/\\r?\\n/).slice(0, 5);\r\n    const delimiters = [',', ';', '\\t', '|'];\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const d of delimiters) {\r\n      counts[d] = 0;\r\n      for (const line of lines) {\r\n        let inQuotes = false;\r\n        for (let i = 0; i < line.length; i++) {\r\n          if (line[i] === '\"') inQuotes = !inQuotes;\r\n          else if (line[i] === d && !inQuotes) counts[d]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let best = ',', max = 0;\r\n    for (const [d, c] of Object.entries(counts)) {\r\n      if (c > max) { max = c; best = d; }\r\n    }\r\n    return best;\r\n  }\r\n\r\n  /**\r\n   * BtmFrontTransformerService mantığına benzer dönüşüm\r\n   * CSV string'i doğrudan dönüştürür\r\n   */\r\n  private transformBtmCsv(csv: string): BtmTransformResult {\r\n    const rows = this.parseTypeKeyValueCsv(csv);\r\n\r\n    console.log('Parsed rows:', rows.length);\r\n    if (rows.length === 0) {\r\n      return {\r\n        processedData: [],\r\n        parametersData: [],\r\n        headerData: [],\r\n        rawRows: []\r\n      };\r\n    }\r\n\r\n    // Örnek satırları logla\r\n    const sampleRows = rows.slice(0, Math.min(5, rows.length));\r\n    console.log('Sample rows:', JSON.stringify(sampleRows));\r\n\r\n    // Parameters ve Header kayıtlarını topla\r\n    const parametersData = this.extractKeyValue(rows, 'Parameters');\r\n    const headerData     = this.extractKeyValue(rows, 'Header');\r\n\r\n    console.log('Parameters:', parametersData.length, 'Header:', headerData.length);\r\n\r\n    // JavaScript objelerine dönüştür (gerekirse)\r\n    const _paramObj = this.toObject(parametersData);\r\n    const _headerObj = this.toObject(headerData);\r\n\r\n    // IbanHesap ve Details gruplarını ayır\r\n    let ibanGroups   = this.groupByTypeAsObjects(rows, 'IbanHesap');\r\n    let detailGroups = this.groupByTypeAsObjects(rows, 'Details');\r\n\r\n    console.log('IbanHesap groups:', ibanGroups.length, 'Detail groups:', detailGroups.length);\r\n\r\n    // Eğer IbanHesap yoksa, Detail'den FinalAccountNo ve DestinationIban alanlarını al\r\n    if (ibanGroups.length === 0 && detailGroups.length > 0) {\r\n      const tempIbanGroups: Array<Record<string, string>> = [];\r\n      for (const detGroup of detailGroups) {\r\n        const finalNo = detGroup['FinalAccountNo'] || detGroup['HesapNo'] || '';\r\n        const iban    = detGroup['DestinationIban'] || detGroup['Iban'] || '';\r\n        if (finalNo || iban) {\r\n          tempIbanGroups.push({\r\n            FinalAccountNo: finalNo,\r\n            DestinationIban: iban,\r\n            HesapNo: finalNo,\r\n            Iban: iban\r\n          });\r\n        }\r\n      }\r\n\r\n      if (tempIbanGroups.length > 0) {\r\n        ibanGroups = tempIbanGroups;\r\n        console.log('Oluşturulan IbanHesap grupları:', ibanGroups.length);\r\n      }\r\n    }\r\n\r\n    // Eğer detailGroups yoksa ama IbanHesap varsa\r\n    if (detailGroups.length === 0 && ibanGroups.length > 0) {\r\n      detailGroups = ibanGroups.map(() => ({\r\n        TotalCount: '',\r\n        OrderDetails: '',\r\n        TransferAmount: '',\r\n        TotalAmount: '',\r\n        ToplamTutar: '',\r\n        Toplam: '',\r\n        RegisterId: '',\r\n        Sicil: '',\r\n        SicilNo: '',\r\n        RegistrationId: ''\r\n      }));\r\n    }\r\n\r\n    // UI tablosu için processedData (component ile aynı alanlar)\r\n    const processedData = ibanGroups.map((ibanObj: Record<string, string>, i: number) => {\r\n      const det = detailGroups[i] || {};\r\n      return {\r\n        DestinationIban: ibanObj['DestinationIban'] || ibanObj['Iban'] || '',\r\n        FinalAccountNo:  ibanObj['FinalAccountNo']  || ibanObj['HesapNo'] || '',\r\n        TotalCount:      det['TotalCount'] || '',\r\n        OrderDetails:    det['OrderDetails'] || det['Detail'] || '',\r\n        TransferAmount:  det['TransferAmount'] || det['Miktar'] || '',\r\n        TotalAmount:     det['TotalAmount'] || det['ToplamTutar'] || det['Toplam'] || '',\r\n        RegisterId:      det['RegisterId'] || det['Sicil'] || det['SicilNo'] || det['RegistrationId'] || ''\r\n      };\r\n    });\r\n\r\n    console.log('İşlenmiş data oluşturuldu:', processedData.length);\r\n    return {\r\n      processedData,\r\n      parametersData,\r\n      headerData,\r\n      rawRows: rows\r\n    };\r\n  }\r\n\r\n  // Eksik metod implementasyonları\r\n  private parseTypeKeyValueCsv(csv: string): any[] {\r\n    // CSV'yi satırlara böl ve her satırı tip-key-value formatında parse et\r\n    const lines = csv.trim().split(/\\r?\\n/);\r\n    const rows: any[] = [];\r\n    \r\n    for (const line of lines) {\r\n      if (line.trim()) {\r\n        // Basit CSV parsing - gerçek implementasyonunuza göre ayarlayın\r\n        const parts = line.split(',').map(part => part.trim().replace(/\"/g, ''));\r\n        if (parts.length >= 3) {\r\n          rows.push({\r\n            type: parts[0],\r\n            key: parts[1],\r\n            value: parts.slice(2).join(',') // Eğer value'da virgül varsa birleştir\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return rows;\r\n  }\r\n\r\n  private extractKeyValue(rows: any[], type: string): Array<{ key: string; value: string }> {\r\n    return rows\r\n      .filter((row: any) => row.type === type)\r\n      .map((row: any) => ({\r\n        key: row.key || '',\r\n        value: row.value || ''\r\n      }));\r\n  }\r\n\r\n  private toObject(keyValuePairs: Array<{ key: string; value: string }>): Record<string, string> {\r\n    const result: Record<string, string> = {};\r\n    for (const pair of keyValuePairs) {\r\n      result[pair.key] = pair.value;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private groupByTypeAsObjects(rows: any[], type: string): Array<Record<string, string>> {\r\n    const filteredRows = rows.filter((row: any) => row.type === type);\r\n    const groups: Array<Record<string, string>> = [];\r\n    \r\n    // Basit gruplama - gerçek implementasyonunuza göre ayarlayın\r\n    let currentGroup: Record<string, string> = {};\r\n    \r\n    for (const row of filteredRows) {\r\n      if (row.key && row.value !== undefined) {\r\n        currentGroup[row.key] = row.value;\r\n      }\r\n      \r\n      // Grup tamamlandığında yeni grup başlat (örnek logic)\r\n      if (Object.keys(currentGroup).length >= 5) {\r\n        groups.push({ ...currentGroup });\r\n        currentGroup = {};\r\n      }\r\n    }\r\n    \r\n    // Son grubu ekle\r\n    if (Object.keys(currentGroup).length > 0) {\r\n      groups.push(currentGroup);\r\n    }\r\n    \r\n    return groups;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}