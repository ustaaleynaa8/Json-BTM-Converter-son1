{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ustaa/Desktop/json-convert-with-btm-backendfull2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, throwError } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./xml-btm.service\";\nimport * as i2 from \"./file-converter.service\";\nimport * as i3 from \"./csv-file-converter.service\";\nexport class BtmOrchestratorService {\n  constructor(xmlBtm, fileConverter, csvFileConverter) {\n    this.xmlBtm = xmlBtm;\n    this.fileConverter = fileConverter;\n    this.csvFileConverter = csvFileConverter;\n  }\n  /**\r\n   * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n   * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n   */\n\n\n  processXml(file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const xmlText = yield _this.readFileAsText(file); // 1) BTM'yi dene (2 sn timeout)\n\n      try {\n        const csvString = yield firstValueFrom(_this.xmlBtm.uploadXml(xmlText).pipe(timeout(2000), catchError(err => throwError(() => err))));\n        console.log('BTM CSV çıktısı:', csvString); // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\n        // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\n\n        const csvOptions = {\n          hasHeader: true,\n          skipEmptyLines: true,\n          selectedDelimiter: ',',\n          doubleQuoteWrap: false,\n          selectedRowDelimiter: 'newline',\n          rowPrefix: '',\n          rowSuffix: '',\n          selectedEncoding: 'utf-8',\n          selectedQuoteOption: 'none',\n          trimWhitespace: true\n        };\n        console.log('BTM CSV string:', csvString); // BTM'den gelen veriyi parse et\n\n        const lines = csvString.trim().split(/\\r?\\n/);\n        const records = [];\n        let currentRecord = {};\n        let currentId = '';\n        let allKeys = new Set(); // Önce tüm olası kolonları topla\n\n        lines.forEach(line => {\n          const [_type, key] = line.split(',').map(v => v.trim());\n\n          if (key) {\n            allKeys.add(key);\n          }\n        }); // Boş bir kayıt şablonu oluştur\n\n        const emptyRecord = Array.from(allKeys).reduce((acc, key) => {\n          acc[key] = '';\n          return acc;\n        }, {});\n        lines.forEach(line => {\n          const [_type, key, value] = line.split(',').map(v => v.trim()); // Yeni kayıt başlangıcını belirle (RegisterId değiştiğinde)\n\n          if (key === 'RegisterId' && value !== currentId) {\n            if (Object.keys(currentRecord).length > 0) {\n              records.push({ ...currentRecord\n              });\n            } // Yeni kayıt için tüm kolonları içeren boş şablonu kullan\n\n\n            currentRecord = { ...emptyRecord\n            };\n            currentId = value;\n          }\n\n          if (key && value !== undefined) {\n            currentRecord[key] = value;\n          }\n        }); // Son kaydı da ekle\n\n        if (Object.keys(currentRecord).length > 0) {\n          records.push({ ...currentRecord\n          });\n        }\n\n        console.log('Tüm kayıtlar:', records); // Array olarak dön\n\n        const rows = records;\n        const properties = Array.from(new Set(records.flatMap(obj => Object.keys(obj))));\n        const pretty = records; // Aynı array'i pretty olarak da kullan\n\n        return {\n          result: rows,\n          properties,\n          prettyJson: pretty,\n          via: 'btm'\n        };\n      } catch (_btmErr) {\n        // 4) BTM başarısızsa local converter'a düş\n        const converter = _this.fileConverter.getConverter('xml');\n\n        if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\n        const localResult = yield converter.convert(file, {// UI'dan opsiyon geliyorsa burada parametrik verebilirsin\n        }); // localResult zaten { result, properties } şemasında\n\n        return { ...localResult,\n          via: 'local'\n        };\n      }\n    })();\n  } // --------- Helpers (servise taşındı) ---------\n\n\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = err => reject(err);\n\n      reader.readAsText(file);\n    });\n  } // ...existing code...\n  // BTM'den gelen Type/Key/Value formatını düz objeye çevir\n\n\n  transformBtmJson(flatData) {\n    // Tüm Key/Value çiftlerini tek bir objeye topla\n    const result = {};\n\n    for (const row of flatData || []) {\n      const {\n        Key,\n        Value\n      } = row || {}; // Her Key/Value çiftini direkt objeye ekle\n\n      if (Key && Value !== undefined) {\n        result[Key] = Value;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nBtmOrchestratorService.ɵfac = function BtmOrchestratorService_Factory(t) {\n  return new (t || BtmOrchestratorService)(i0.ɵɵinject(i1.XmlBtmService), i0.ɵɵinject(i2.FileConverterService), i0.ɵɵinject(i3.CsvFileConverterService));\n};\n\nBtmOrchestratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BtmOrchestratorService,\n  factory: BtmOrchestratorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["firstValueFrom","throwError","timeout","catchError","BtmOrchestratorService","constructor","xmlBtm","fileConverter","csvFileConverter","processXml","file","xmlText","readFileAsText","csvString","uploadXml","pipe","err","console","log","csvOptions","hasHeader","skipEmptyLines","selectedDelimiter","doubleQuoteWrap","selectedRowDelimiter","rowPrefix","rowSuffix","selectedEncoding","selectedQuoteOption","trimWhitespace","lines","trim","split","records","currentRecord","currentId","allKeys","Set","forEach","line","_type","key","map","v","add","emptyRecord","Array","from","reduce","acc","value","Object","keys","length","push","undefined","rows","properties","flatMap","obj","pretty","result","prettyJson","via","_btmErr","converter","getConverter","Error","localResult","convert","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","transformBtmJson","flatData","row","Key","Value","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ustaa\\Desktop\\json-convert-with-btm-backendfull2\\src\\app\\services\\btm-orchestrator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { XmlBtmService } from './xml-btm.service';\r\nimport { FileConverterService } from './file-converter.service';\r\nimport { CsvFileConverterService } from './csv-file-converter.service';\r\nimport { firstValueFrom, throwError } from 'rxjs';\r\nimport { timeout, catchError } from 'rxjs/operators';\r\n\r\nexport interface OrchestratedResult {\r\n    result: any[];         // flat tablo datası\r\n    properties: string[];  // tablo başlıkları\r\n    prettyJson?: any;      // okunaklı/gruplu JSON (BTM başarılıysa)\r\n    via: 'btm' | 'local';  // hangi yol kullanıldı\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BtmOrchestratorService {\r\n    constructor(\r\n        private xmlBtm: XmlBtmService,\r\n        private fileConverter: FileConverterService,\r\n        private csvFileConverter: CsvFileConverterService\r\n    ) { }\r\n\r\n    /**\r\n     * Tek sorumluluk: XML dosyasını al, BTM'yi dene, olmazsa local parser'a düş,\r\n     * sonucu tablo (flat) + opsiyonel prettyJson ile döndür.\r\n     */\r\n    async processXml(file: File): Promise<OrchestratedResult> {\r\n        const xmlText = await this.readFileAsText(file);\r\n\r\n        // 1) BTM'yi dene (2 sn timeout)\r\n        try {\r\n            const csvString: string = await firstValueFrom(\r\n                this.xmlBtm.uploadXml(xmlText).pipe(\r\n                    timeout(2000),\r\n                    catchError(err => throwError(() => err))\r\n                )\r\n            );\r\n            \r\n            console.log('BTM CSV çıktısı:', csvString);\r\n\r\n            // 2) CSV -> flat JSON tablo (mevcut converter servisi ile)\r\n            // Varsayılan opsiyonlar, ihtiyaca göre UI'dan alınabilir\r\n            const csvOptions = {\r\n                hasHeader: true,\r\n                skipEmptyLines: true,\r\n                selectedDelimiter: ',',\r\n                doubleQuoteWrap: false,\r\n                selectedRowDelimiter: 'newline',\r\n                rowPrefix: '',\r\n                rowSuffix: '',\r\n                selectedEncoding: 'utf-8',\r\n                selectedQuoteOption: 'none',\r\n                trimWhitespace: true\r\n            };\r\n\r\n            console.log('BTM CSV string:', csvString);\r\n            \r\n            // BTM'den gelen veriyi parse et\r\n            const lines = csvString.trim().split(/\\r?\\n/);\r\n            const records: { [key: string]: any }[] = [];\r\n            let currentRecord: { [key: string]: any } = {};\r\n            let currentId = '';\r\n            let allKeys = new Set<string>();\r\n            \r\n            // Önce tüm olası kolonları topla\r\n            lines.forEach(line => {\r\n                const [_type, key] = line.split(',').map(v => v.trim());\r\n                if (key) {\r\n                    allKeys.add(key);\r\n                }\r\n            });\r\n            \r\n            // Boş bir kayıt şablonu oluştur\r\n            const emptyRecord = Array.from(allKeys).reduce((acc, key) => {\r\n                acc[key] = '';\r\n                return acc;\r\n            }, {} as { [key: string]: string });\r\n            \r\n            lines.forEach(line => {\r\n                const [_type, key, value] = line.split(',').map(v => v.trim());\r\n                \r\n                // Yeni kayıt başlangıcını belirle (RegisterId değiştiğinde)\r\n                if (key === 'RegisterId' && value !== currentId) {\r\n                    if (Object.keys(currentRecord).length > 0) {\r\n                        records.push({...currentRecord});\r\n                    }\r\n                    // Yeni kayıt için tüm kolonları içeren boş şablonu kullan\r\n                    currentRecord = {...emptyRecord};\r\n                    currentId = value;\r\n                }\r\n                \r\n                if (key && value !== undefined) {\r\n                    currentRecord[key] = value;\r\n                }\r\n            });\r\n            \r\n            // Son kaydı da ekle\r\n            if (Object.keys(currentRecord).length > 0) {\r\n                records.push({...currentRecord});\r\n            }\r\n            \r\n            console.log('Tüm kayıtlar:', records);\r\n            \r\n            // Array olarak dön\r\n            const rows = records;\r\n            const properties = Array.from(new Set(records.flatMap(obj => Object.keys(obj))));\r\n            const pretty = records; // Aynı array'i pretty olarak da kullan\r\n            return { result: rows, properties, prettyJson: pretty, via: 'btm' };\r\n        } catch (_btmErr) {\r\n            // 4) BTM başarısızsa local converter'a düş\r\n            const converter = this.fileConverter.getConverter('xml');\r\n            if (!converter) throw new Error('XML dönüştürücü bulunamadı (local).');\r\n\r\n            const localResult = await converter.convert(file, {\r\n                // UI'dan opsiyon geliyorsa burada parametrik verebilirsin\r\n            });\r\n\r\n            // localResult zaten { result, properties } şemasında\r\n            return { ...localResult, via: 'local' };\r\n        }\r\n    }\r\n\r\n    // --------- Helpers (servise taşındı) ---------\r\n\r\n    private readFileAsText(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => resolve(reader.result as string);\r\n            reader.onerror = (err) => reject(err);\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    // BTM'den gelen Type/Key/Value formatını düz objeye çevir\r\n    private transformBtmJson(flatData: Array<{ Type: string; Key: string; Value: string }>) {\r\n        // Tüm Key/Value çiftlerini tek bir objeye topla\r\n        const result: any = {};\r\n        \r\n        for (const row of flatData || []) {\r\n            const { Key, Value } = row || ({} as any);\r\n            // Her Key/Value çiftini direkt objeye ekle\r\n            if (Key && Value !== undefined) {\r\n                result[Key] = Value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}